
bootloader_update_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034ac  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003644  08003644  00013644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003660  08003660  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003660  08003660  00013660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003668  08003668  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003668  08003668  00013668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800366c  0800366c  0001366c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000180c  2000000c  0800367c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001818  0800367c  00021818  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9fc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002168  00000000  00000000  0002ca38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0002eba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  0002f488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001622f  00000000  00000000  0002fca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9ce  00000000  00000000  00045ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008653a  00000000  00000000  000518a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7ddf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022a4  00000000  00000000  000d7e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800362c 	.word	0x0800362c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800362c 	.word	0x0800362c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_UART_RxCpltCallback>:
#define ADDR_UPDATE	0x0800A000

uint8_t rx_data[1];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	bootloader_get_data(rx_data[0]);
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_UART_RxCpltCallback+0x24>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 f921 	bl	8000724 <bootloader_get_data>
	HAL_UART_Receive_IT(&huart2, rx_data, 1);
 80004e2:	2201      	movs	r2, #1
 80004e4:	4903      	ldr	r1, [pc, #12]	; (80004f4 <HAL_UART_RxCpltCallback+0x24>)
 80004e6:	4804      	ldr	r0, [pc, #16]	; (80004f8 <HAL_UART_RxCpltCallback+0x28>)
 80004e8:	f002 f98b 	bl	8002802 <HAL_UART_Receive_IT>
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000030 	.word	0x20000030
 80004f8:	20000034 	.word	0x20000034

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fbd6 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f81e 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f8a4 	bl	8000654 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050c:	f000 f878 	bl	8000600 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  bootloader_init();
 8000510:	f000 f8ea 	bl	80006e8 <bootloader_init>
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000514:	2201      	movs	r2, #1
 8000516:	4907      	ldr	r1, [pc, #28]	; (8000534 <main+0x38>)
 8000518:	4807      	ldr	r0, [pc, #28]	; (8000538 <main+0x3c>)
 800051a:	f002 f972 	bl	8002802 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  bootloader_update(ADDR_UPDATE);
 800051e:	4807      	ldr	r0, [pc, #28]	; (800053c <main+0x40>)
 8000520:	f000 f96a 	bl	80007f8 <bootloader_update>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <main+0x44>)
 800052c:	f001 fb5a 	bl	8001be4 <HAL_GPIO_WritePin>
	  bootloader_update(ADDR_UPDATE);
 8000530:	e7f5      	b.n	800051e <main+0x22>
 8000532:	bf00      	nop
 8000534:	20000030 	.word	0x20000030
 8000538:	20000034 	.word	0x20000034
 800053c:	0800a000 	.word	0x0800a000
 8000540:	40020c00 	.word	0x40020c00

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2230      	movs	r2, #48	; 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f003 f862 	bl	800361c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <SystemClock_Config+0xb4>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <SystemClock_Config+0xb4>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <SystemClock_Config+0xb4>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <SystemClock_Config+0xb8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <SystemClock_Config+0xb8>)
 800058e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b19      	ldr	r3, [pc, #100]	; (80005fc <SystemClock_Config+0xb8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	2310      	movs	r3, #16
 80005aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fb2f 	bl	8001c18 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005c0:	f000 f88c 	bl	80006dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fd92 	bl	8002108 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005ea:	f000 f877 	bl	80006dc <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	; 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_USART2_UART_Init+0x4c>)
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <MX_USART2_UART_Init+0x50>)
 8000608:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <MX_USART2_UART_Init+0x4c>)
 800060c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000610:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_USART2_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_USART2_UART_Init+0x4c>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_USART2_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_USART2_UART_Init+0x4c>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_USART2_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_USART2_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_USART2_UART_Init+0x4c>)
 8000638:	f002 f804 	bl	8002644 <HAL_UART_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000642:	f000 f84b 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000034 	.word	0x20000034
 8000650:	40004400 	.word	0x40004400

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_GPIO_Init+0x80>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <MX_GPIO_Init+0x80>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_GPIO_Init+0x80>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_GPIO_Init+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a11      	ldr	r2, [pc, #68]	; (80006d4 <MX_GPIO_Init+0x80>)
 8000690:	f043 0308 	orr.w	r3, r3, #8
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_GPIO_Init+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0308 	and.w	r3, r3, #8
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a8:	480b      	ldr	r0, [pc, #44]	; (80006d8 <MX_GPIO_Init+0x84>)
 80006aa:	f001 fa9b 	bl	8001be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_GPIO_Init+0x84>)
 80006c8:	f001 f824 	bl	8001714 <HAL_GPIO_Init>

}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020c00 	.word	0x40020c00

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <Error_Handler+0x8>
	...

080006e8 <bootloader_init>:
Bootloader_Struct boot;
extern UART_HandleTypeDef huart2;
int byte_to_flash = 0;
int x;
void bootloader_init()
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	boot.total_bytes = 0;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <bootloader_init+0x38>)
 80006ee:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80006f2:	3310      	adds	r3, #16
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
	boot.idx = 0;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <bootloader_init+0x38>)
 80006fa:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80006fe:	3314      	adds	r3, #20
 8000700:	2200      	movs	r2, #0
 8000702:	801a      	strh	r2, [r3, #0]
	boot.flag = 0;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <bootloader_init+0x38>)
 8000706:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800070a:	3316      	adds	r3, #22
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
	memset(boot.data_buffer, 0, HEX_BUFFER_SIZE);
 8000710:	f241 7270 	movw	r2, #6000	; 0x1770
 8000714:	2100      	movs	r1, #0
 8000716:	4802      	ldr	r0, [pc, #8]	; (8000720 <bootloader_init+0x38>)
 8000718:	f002 ff80 	bl	800361c <memset>
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000007c 	.word	0x2000007c

08000724 <bootloader_get_data>:
void bootloader_get_data(uint8_t rx_data)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	if(boot.flag == 0)
 800072e:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <bootloader_get_data+0xc4>)
 8000730:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8000734:	3316      	adds	r3, #22
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d123      	bne.n	8000784 <bootloader_get_data+0x60>
	{
		if(rx_data != '\n')
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	2b0a      	cmp	r3, #10
 8000740:	d012      	beq.n	8000768 <bootloader_get_data+0x44>
		{
			boot.total_bytes = boot.total_bytes*10 + (rx_data - '0');
 8000742:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <bootloader_get_data+0xc4>)
 8000744:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8000748:	3310      	adds	r3, #16
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4613      	mov	r3, r2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	4413      	add	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	461a      	mov	r2, r3
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	3b30      	subs	r3, #48	; 0x30
 800075a:	441a      	add	r2, r3
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <bootloader_get_data+0xc4>)
 800075e:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8000762:	3310      	adds	r3, #16
 8000764:	601a      	str	r2, [r3, #0]
		if(byte_cnt == boot.total_bytes)
		{
			boot.jump_application = 1;
		}
	}
}
 8000766:	e03a      	b.n	80007de <bootloader_get_data+0xba>
			HAL_UART_Transmit(&huart2, (uint8_t*)"1", strlen("1"), 2000);
 8000768:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800076c:	2201      	movs	r2, #1
 800076e:	491f      	ldr	r1, [pc, #124]	; (80007ec <bootloader_get_data+0xc8>)
 8000770:	481f      	ldr	r0, [pc, #124]	; (80007f0 <bootloader_get_data+0xcc>)
 8000772:	f001 ffb4 	bl	80026de <HAL_UART_Transmit>
			boot.flag = 1;
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <bootloader_get_data+0xc4>)
 8000778:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800077c:	3316      	adds	r3, #22
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
}
 8000782:	e02c      	b.n	80007de <bootloader_get_data+0xba>
	else if(boot.flag == 1)
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <bootloader_get_data+0xc4>)
 8000786:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800078a:	3316      	adds	r3, #22
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d125      	bne.n	80007de <bootloader_get_data+0xba>
		boot.data_buffer[boot.idx ++] = rx_data;
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <bootloader_get_data+0xc4>)
 8000794:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8000798:	3314      	adds	r3, #20
 800079a:	881a      	ldrh	r2, [r3, #0]
 800079c:	1c53      	adds	r3, r2, #1
 800079e:	b299      	uxth	r1, r3
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <bootloader_get_data+0xc4>)
 80007a2:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80007a6:	3314      	adds	r3, #20
 80007a8:	8019      	strh	r1, [r3, #0]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <bootloader_get_data+0xc4>)
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	5453      	strb	r3, [r2, r1]
		byte_cnt ++;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <bootloader_get_data+0xd0>)
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	3301      	adds	r3, #1
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <bootloader_get_data+0xd0>)
 80007bc:	801a      	strh	r2, [r3, #0]
		if(byte_cnt == boot.total_bytes)
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <bootloader_get_data+0xd0>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <bootloader_get_data+0xc4>)
 80007c6:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80007ca:	3310      	adds	r3, #16
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d105      	bne.n	80007de <bootloader_get_data+0xba>
			boot.jump_application = 1;
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <bootloader_get_data+0xc4>)
 80007d4:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80007d8:	3317      	adds	r3, #23
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000007c 	.word	0x2000007c
 80007ec:	08003644 	.word	0x08003644
 80007f0:	20000034 	.word	0x20000034
 80007f4:	2000002c 	.word	0x2000002c

080007f8 <bootloader_update>:


void bootloader_update(uint32_t address)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	if(boot.jump_application == 1)
 8000800:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <bootloader_update+0xb4>)
 8000802:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8000806:	3317      	adds	r3, #23
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d14a      	bne.n	80008a4 <bootloader_update+0xac>
	{
		flash_erase(address, byte_to_flash);
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <bootloader_update+0xb8>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	4619      	mov	r1, r3
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f8c6 	bl	80009a8 <flash_erase>
		flash_write_array(boot.data_buffer, address, boot.total_bytes, _4_BYTE);
 800081c:	4b23      	ldr	r3, [pc, #140]	; (80008ac <bootloader_update+0xb4>)
 800081e:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8000822:	3310      	adds	r3, #16
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	2302      	movs	r3, #2
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	481f      	ldr	r0, [pc, #124]	; (80008ac <bootloader_update+0xb4>)
 800082e:	f000 f8ef 	bl	8000a10 <flash_write_array>
		boot.jump_application = 0;
 8000832:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <bootloader_update+0xb4>)
 8000834:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8000838:	3317      	adds	r3, #23
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
		memset(boot.data_buffer, 0, HEX_BUFFER_SIZE);
 800083e:	f241 7270 	movw	r2, #6000	; 0x1770
 8000842:	2100      	movs	r1, #0
 8000844:	4819      	ldr	r0, [pc, #100]	; (80008ac <bootloader_update+0xb4>)
 8000846:	f002 fee9 	bl	800361c <memset>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000850:	4818      	ldr	r0, [pc, #96]	; (80008b4 <bootloader_update+0xbc>)
 8000852:	f001 f9c7 	bl	8001be4 <HAL_GPIO_WritePin>

		// Deinit Pheripheral
		HAL_RCC_DeInit();
 8000856:	f001 fe27 	bl	80024a8 <HAL_RCC_DeInit>
		HAL_DeInit();
 800085a:	f000 fa4b 	bl	8000cf4 <HAL_DeInit>
		HAL_GPIO_DeInit(LED1_GPIO_Port, LED1_Pin);
 800085e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000862:	4814      	ldr	r0, [pc, #80]	; (80008b4 <bootloader_update+0xbc>)
 8000864:	f001 f8da 	bl	8001a1c <HAL_GPIO_DeInit>
		/* Turn off fault harder*/
	    SCB->SHCSR &= ~( SCB_SHCSR_USGFAULTENA_Msk |\
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <bootloader_update+0xc0>)
 800086a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800086c:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <bootloader_update+0xc0>)
 800086e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8000872:	6253      	str	r3, [r2, #36]	; 0x24
	    SCB_SHCSR_BUSFAULTENA_Msk | \
	    SCB_SHCSR_MEMFAULTENA_Msk ) ;

	    SysTick->CTRL = 0;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <bootloader_update+0xc4>)
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
	    SysTick->LOAD = 0;
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <bootloader_update+0xc4>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
	    SysTick->VAL = 0;
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <bootloader_update+0xc4>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
	   /* Set Main Stack Pointer*/
	   __set_MSP(*((volatile uint32_t*) address));
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f383 8808 	msr	MSP, r3
}
 8000892:	bf00      	nop

	   uint32_t JumpAddress = *((volatile uint32_t*) (address + 4));
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3304      	adds	r3, #4
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	617b      	str	r3, [r7, #20]

	   /* Set Program Counter to Blink LED Apptication Address*/
	   void (*reset_handler)(void) = (void*)JumpAddress;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	613b      	str	r3, [r7, #16]
	   reset_handler();
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	4798      	blx	r3

	}
}
 80008a4:	bf00      	nop
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000007c 	.word	0x2000007c
 80008b0:	20000028 	.word	0x20000028
 80008b4:	40020c00 	.word	0x40020c00
 80008b8:	e000ed00 	.word	0xe000ed00
 80008bc:	e000e010 	.word	0xe000e010

080008c0 <flash_get_sector>:


#include "st_flash.h"

uint32_t flash_get_sector(uint32_t address)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]

  /* BANK 1 */
  if((address >= 0x08000000) && (address < 0x08004000))
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80008d2:	d306      	bcc.n	80008e2 <flash_get_sector+0x22>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a2c      	ldr	r2, [pc, #176]	; (8000988 <flash_get_sector+0xc8>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d202      	bcs.n	80008e2 <flash_get_sector+0x22>
  {
	sector = FLASH_SECTOR_0;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	e04b      	b.n	800097a <flash_get_sector+0xba>
  }

  else if((address >= 0x08004000) && (address < 0x08008000))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4a28      	ldr	r2, [pc, #160]	; (8000988 <flash_get_sector+0xc8>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d306      	bcc.n	80008f8 <flash_get_sector+0x38>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a27      	ldr	r2, [pc, #156]	; (800098c <flash_get_sector+0xcc>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d202      	bcs.n	80008f8 <flash_get_sector+0x38>
  {
	sector = FLASH_SECTOR_1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	e040      	b.n	800097a <flash_get_sector+0xba>
  }

  else if((address >= 0x08008000) && (address < 0x0800C000))
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a24      	ldr	r2, [pc, #144]	; (800098c <flash_get_sector+0xcc>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d306      	bcc.n	800090e <flash_get_sector+0x4e>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a23      	ldr	r2, [pc, #140]	; (8000990 <flash_get_sector+0xd0>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d202      	bcs.n	800090e <flash_get_sector+0x4e>
  {
	sector = FLASH_SECTOR_2;
 8000908:	2302      	movs	r3, #2
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	e035      	b.n	800097a <flash_get_sector+0xba>
  }

  else if((address >= 0x0800C000) && (address < 0x08010000))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <flash_get_sector+0xd0>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d306      	bcc.n	8000924 <flash_get_sector+0x64>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a1e      	ldr	r2, [pc, #120]	; (8000994 <flash_get_sector+0xd4>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d802      	bhi.n	8000924 <flash_get_sector+0x64>
  {
	sector = FLASH_SECTOR_3;
 800091e:	2303      	movs	r3, #3
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	e02a      	b.n	800097a <flash_get_sector+0xba>
  }

  else if((address >= 0x08010000) && (address < 0x08020000))
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a1b      	ldr	r2, [pc, #108]	; (8000994 <flash_get_sector+0xd4>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d906      	bls.n	800093a <flash_get_sector+0x7a>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a1a      	ldr	r2, [pc, #104]	; (8000998 <flash_get_sector+0xd8>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d802      	bhi.n	800093a <flash_get_sector+0x7a>
  {
	sector = FLASH_SECTOR_4;
 8000934:	2304      	movs	r3, #4
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	e01f      	b.n	800097a <flash_get_sector+0xba>
  }

  else if((address >= 0x08020000) && (address < 0x08040000))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a16      	ldr	r2, [pc, #88]	; (8000998 <flash_get_sector+0xd8>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d906      	bls.n	8000950 <flash_get_sector+0x90>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a15      	ldr	r2, [pc, #84]	; (800099c <flash_get_sector+0xdc>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d802      	bhi.n	8000950 <flash_get_sector+0x90>
  {
	sector = FLASH_SECTOR_5;
 800094a:	2305      	movs	r3, #5
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	e014      	b.n	800097a <flash_get_sector+0xba>
  }

  else if((address >= 0x08040000) && (address < 0x08060000))
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <flash_get_sector+0xdc>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d906      	bls.n	8000966 <flash_get_sector+0xa6>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a11      	ldr	r2, [pc, #68]	; (80009a0 <flash_get_sector+0xe0>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d802      	bhi.n	8000966 <flash_get_sector+0xa6>
  {
	sector = FLASH_SECTOR_6;
 8000960:	2306      	movs	r3, #6
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	e009      	b.n	800097a <flash_get_sector+0xba>
  }

  else if((address >= 0x08060000) && (address < 0x0807FFFF))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a0d      	ldr	r2, [pc, #52]	; (80009a0 <flash_get_sector+0xe0>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d905      	bls.n	800097a <flash_get_sector+0xba>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a0c      	ldr	r2, [pc, #48]	; (80009a4 <flash_get_sector+0xe4>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d201      	bcs.n	800097a <flash_get_sector+0xba>
  {
	sector = FLASH_SECTOR_7;
 8000976:	2307      	movs	r3, #7
 8000978:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	08004000 	.word	0x08004000
 800098c:	08008000 	.word	0x08008000
 8000990:	0800c000 	.word	0x0800c000
 8000994:	0800ffff 	.word	0x0800ffff
 8000998:	0801ffff 	.word	0x0801ffff
 800099c:	0803ffff 	.word	0x0803ffff
 80009a0:	0805ffff 	.word	0x0805ffff
 80009a4:	0807ffff 	.word	0x0807ffff

080009a8 <flash_erase>:



void flash_erase(uint32_t startAddress, uint8_t size)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
	uint32_t startSector = flash_get_sector(startAddress);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff83 	bl	80008c0 <flash_get_sector>
 80009ba:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t endAddress  = startAddress + size*4;
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	461a      	mov	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t endSector   = flash_get_sector(endAddress);
 80009c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009ca:	f7ff ff79 	bl	80008c0 <flash_get_sector>
 80009ce:	6278      	str	r0, [r7, #36]	; 0x24

	HAL_FLASH_Unlock();
 80009d0:	f000 fc0c 	bl	80011ec <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.Banks = 1;
 80009d4:	2301      	movs	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80009d8:	2302      	movs	r3, #2
 80009da:	623b      	str	r3, [r7, #32]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80009dc:	2300      	movs	r3, #0
 80009de:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Sector = flash_get_sector(startAddress);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ff6d 	bl	80008c0 <flash_get_sector>
 80009e6:	4603      	mov	r3, r0
 80009e8:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbSectors = endSector - startSector + 1;
 80009ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	3301      	adds	r3, #1
 80009f2:	61fb      	str	r3, [r7, #28]

	uint32_t error;
	HAL_FLASHEx_Erase(&EraseInitStruct, &error);
 80009f4:	f107 020c 	add.w	r2, r7, #12
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	4611      	mov	r1, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 fd66 	bl	80014d0 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000a04:	f000 fc14 	bl	8001230 <HAL_FLASH_Lock>
}
 8000a08:	bf00      	nop
 8000a0a:	3730      	adds	r7, #48	; 0x30
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <flash_write_array>:
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *(uint32_t*)&f);
	HAL_FLASH_Lock();
}

void flash_write_array(void *bufferW, uint32_t startAddress, uint32_t size, DataTypedef DATA_TYPE)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
 8000a1c:	70fb      	strb	r3, [r7, #3]
	uint32_t wAddress = startAddress;
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	61fb      	str	r3, [r7, #28]
	HAL_FLASH_Unlock();
 8000a22:	f000 fbe3 	bl	80011ec <HAL_FLASH_Unlock>

	switch(DATA_TYPE)
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d039      	beq.n	8000aa0 <flash_write_array+0x90>
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	dc51      	bgt.n	8000ad4 <flash_write_array+0xc4>
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <flash_write_array+0x2a>
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d019      	beq.n	8000a6c <flash_write_array+0x5c>
 8000a38:	e04c      	b.n	8000ad4 <flash_write_array+0xc4>
	{
		case _1_BYTE:
			for(uint8_t i=0; i< size; i++)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	76fb      	strb	r3, [r7, #27]
 8000a3e:	e010      	b.n	8000a62 <flash_write_array+0x52>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, wAddress, ((uint8_t*)bufferW)[i]);
 8000a40:	7efb      	ldrb	r3, [r7, #27]
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	4413      	add	r3, r2
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	f04f 0300 	mov.w	r3, #0
 8000a4e:	69f9      	ldr	r1, [r7, #28]
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 fb77 	bl	8001144 <HAL_FLASH_Program>
				wAddress ++;
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	61fb      	str	r3, [r7, #28]
			for(uint8_t i=0; i< size; i++)
 8000a5c:	7efb      	ldrb	r3, [r7, #27]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	76fb      	strb	r3, [r7, #27]
 8000a62:	7efb      	ldrb	r3, [r7, #27]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d8ea      	bhi.n	8000a40 <flash_write_array+0x30>
			}
			break;
 8000a6a:	e033      	b.n	8000ad4 <flash_write_array+0xc4>

		case _2_BYTE:
			for(uint16_t i=0; i< size; i++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	833b      	strh	r3, [r7, #24]
 8000a70:	e011      	b.n	8000a96 <flash_write_array+0x86>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, wAddress, ((uint16_t*)bufferW)[i]);
 8000a72:	8b3b      	ldrh	r3, [r7, #24]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	4413      	add	r3, r2
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	f04f 0300 	mov.w	r3, #0
 8000a82:	69f9      	ldr	r1, [r7, #28]
 8000a84:	2001      	movs	r0, #1
 8000a86:	f000 fb5d 	bl	8001144 <HAL_FLASH_Program>
				wAddress += 2;
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]
			for(uint16_t i=0; i< size; i++)
 8000a90:	8b3b      	ldrh	r3, [r7, #24]
 8000a92:	3301      	adds	r3, #1
 8000a94:	833b      	strh	r3, [r7, #24]
 8000a96:	8b3b      	ldrh	r3, [r7, #24]
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d8e9      	bhi.n	8000a72 <flash_write_array+0x62>
			}
			break;
 8000a9e:	e019      	b.n	8000ad4 <flash_write_array+0xc4>

		case _4_BYTE:
			for(uint32_t i=0; i< size; i++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	e011      	b.n	8000aca <flash_write_array+0xba>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, wAddress, ((uint32_t*)bufferW)[i]);
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	4413      	add	r3, r2
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	f04f 0300 	mov.w	r3, #0
 8000ab6:	69f9      	ldr	r1, [r7, #28]
 8000ab8:	2002      	movs	r0, #2
 8000aba:	f000 fb43 	bl	8001144 <HAL_FLASH_Program>
				wAddress += 4;
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	61fb      	str	r3, [r7, #28]
			for(uint32_t i=0; i< size; i++)
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d3e9      	bcc.n	8000aa6 <flash_write_array+0x96>
			}
			break;
 8000ad2:	bf00      	nop
	}
	HAL_FLASH_Lock();
 8000ad4:	f000 fbac 	bl	8001230 <HAL_FLASH_Lock>
}
 8000ad8:	bf00      	nop
 8000ada:	3720      	adds	r7, #32
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <HAL_UART_MspInit+0x94>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d133      	bne.n	8000bba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <HAL_UART_MspInit+0x98>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <HAL_UART_MspInit+0x98>)
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <HAL_UART_MspInit+0x98>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_UART_MspInit+0x98>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <HAL_UART_MspInit+0x98>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_UART_MspInit+0x98>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b8a:	230c      	movs	r3, #12
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4809      	ldr	r0, [pc, #36]	; (8000bcc <HAL_UART_MspInit+0x9c>)
 8000ba6:	f000 fdb5 	bl	8001714 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2101      	movs	r1, #1
 8000bae:	2026      	movs	r0, #38	; 0x26
 8000bb0:	f000 f9ff 	bl	8000fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bb4:	2026      	movs	r0, #38	; 0x26
 8000bb6:	f000 fa18 	bl	8000fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f8ce 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <USART2_IRQHandler+0x10>)
 8000c2a:	f001 fe1b 	bl	8002864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000034 	.word	0x20000034

08000c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <SystemInit+0x20>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <SystemInit+0x20>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <Reset_Handler>:
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c94 <LoopFillZerobss+0x12>
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <LoopFillZerobss+0x16>)
 8000c62:	490e      	ldr	r1, [pc, #56]	; (8000c9c <LoopFillZerobss+0x1a>)
 8000c64:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <LoopFillZerobss+0x1e>)
 8000c66:	2300      	movs	r3, #0
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:
 8000c6a:	58d4      	ldr	r4, [r2, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:
 8000c70:	18c4      	adds	r4, r0, r3
 8000c72:	428c      	cmp	r4, r1
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x22>)
 8000c78:	4c0b      	ldr	r4, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x26>)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:
 8000c82:	42a2      	cmp	r2, r4
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>
 8000c86:	f7ff ffd7 	bl	8000c38 <SystemInit>
 8000c8a:	f002 fca3 	bl	80035d4 <__libc_init_array>
 8000c8e:	f7ff fc35 	bl	80004fc <main>
 8000c92:	4770      	bx	lr
 8000c94:	20020000 	.word	0x20020000
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	2000000c 	.word	0x2000000c
 8000ca0:	08003670 	.word	0x08003670
 8000ca4:	2000000c 	.word	0x2000000c
 8000ca8:	20001818 	.word	0x20001818

08000cac <ADC_IRQHandler>:
 8000cac:	e7fe      	b.n	8000cac <ADC_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <HAL_Init+0x40>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_Init+0x40>)
 8000cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_Init+0x40>)
 8000cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 f95f 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cde:	200f      	movs	r0, #15
 8000ce0:	f000 f83c 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce4:	f7ff fefc 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023c00 	.word	0x40023c00

08000cf4 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <HAL_DeInit+0x54>)
 8000cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfe:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_DeInit+0x54>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <HAL_DeInit+0x54>)
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_DeInit+0x54>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_DeInit+0x54>)
 8000d16:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_DeInit+0x54>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_DeInit+0x54>)
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <HAL_DeInit+0x54>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <HAL_DeInit+0x54>)
 8000d32:	f04f 32ff 	mov.w	r2, #4294967295
 8000d36:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <HAL_DeInit+0x54>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000d3e:	f000 f805 	bl	8000d4c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40023800 	.word	0x40023800

08000d4c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x54>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x58>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f943 	bl	8001006 <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00e      	b.n	8000da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d80a      	bhi.n	8000da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f000 f90b 	bl	8000fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <HAL_InitTick+0x5c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e000      	b.n	8000da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000004 	.word	0x20000004

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	200017f4 	.word	0x200017f4

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	200017f4 	.word	0x200017f4

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0b      	blt.n	8000e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 021f 	and.w	r2, r3, #31
 8000e78:	4907      	ldr	r1, [pc, #28]	; (8000e98 <__NVIC_EnableIRQ+0x38>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e100 	.word	0xe000e100

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff29 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc4:	f7ff ff3e 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff ff8e 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff5d 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff31 	bl	8000e60 <__NVIC_EnableIRQ>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffa2 	bl	8000f58 <SysTick_Config>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff feda 	bl	8000de4 <HAL_GetTick>
 8001030:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d008      	beq.n	8001050 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2280      	movs	r2, #128	; 0x80
 8001042:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e052      	b.n	80010f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0216 	bic.w	r2, r2, #22
 800105e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	695a      	ldr	r2, [r3, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800106e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	2b00      	cmp	r3, #0
 8001076:	d103      	bne.n	8001080 <HAL_DMA_Abort+0x62>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107c:	2b00      	cmp	r3, #0
 800107e:	d007      	beq.n	8001090 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 0208 	bic.w	r2, r2, #8
 800108e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0201 	bic.w	r2, r2, #1
 800109e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010a0:	e013      	b.n	80010ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010a2:	f7ff fe9f 	bl	8000de4 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d90c      	bls.n	80010ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2220      	movs	r2, #32
 80010b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2203      	movs	r2, #3
 80010ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e015      	b.n	80010f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1e4      	bne.n	80010a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010dc:	223f      	movs	r2, #63	; 0x3f
 80010de:	409a      	lsls	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d004      	beq.n	800111c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2280      	movs	r2, #128	; 0x80
 8001116:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e00c      	b.n	8001136 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2205      	movs	r2, #5
 8001120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0201 	bic.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <HAL_FLASH_Program+0xa0>)
 8001158:	7e1b      	ldrb	r3, [r3, #24]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <HAL_FLASH_Program+0x1e>
 800115e:	2302      	movs	r3, #2
 8001160:	e03b      	b.n	80011da <HAL_FLASH_Program+0x96>
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <HAL_FLASH_Program+0xa0>)
 8001164:	2201      	movs	r2, #1
 8001166:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001168:	f24c 3050 	movw	r0, #50000	; 0xc350
 800116c:	f000 f870 	bl	8001250 <FLASH_WaitForLastOperation>
 8001170:	4603      	mov	r3, r0
 8001172:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001174:	7dfb      	ldrb	r3, [r7, #23]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d12b      	bne.n	80011d2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d105      	bne.n	800118c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001180:	783b      	ldrb	r3, [r7, #0]
 8001182:	4619      	mov	r1, r3
 8001184:	68b8      	ldr	r0, [r7, #8]
 8001186:	f000 f91b 	bl	80013c0 <FLASH_Program_Byte>
 800118a:	e016      	b.n	80011ba <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d105      	bne.n	800119e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001192:	883b      	ldrh	r3, [r7, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	68b8      	ldr	r0, [r7, #8]
 8001198:	f000 f8ee 	bl	8001378 <FLASH_Program_HalfWord>
 800119c:	e00d      	b.n	80011ba <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d105      	bne.n	80011b0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	68b8      	ldr	r0, [r7, #8]
 80011aa:	f000 f8c3 	bl	8001334 <FLASH_Program_Word>
 80011ae:	e004      	b.n	80011ba <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80011b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011b4:	68b8      	ldr	r0, [r7, #8]
 80011b6:	f000 f88b 	bl	80012d0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011be:	f000 f847 	bl	8001250 <FLASH_WaitForLastOperation>
 80011c2:	4603      	mov	r3, r0
 80011c4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_FLASH_Program+0xa4>)
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_FLASH_Program+0xa4>)
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <HAL_FLASH_Program+0xa0>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200017f8 	.word	0x200017f8
 80011e8:	40023c00 	.word	0x40023c00

080011ec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_FLASH_Unlock+0x38>)
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	da0b      	bge.n	8001216 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_FLASH_Unlock+0x38>)
 8001200:	4a09      	ldr	r2, [pc, #36]	; (8001228 <HAL_FLASH_Unlock+0x3c>)
 8001202:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <HAL_FLASH_Unlock+0x38>)
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <HAL_FLASH_Unlock+0x40>)
 8001208:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_FLASH_Unlock+0x38>)
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	2b00      	cmp	r3, #0
 8001210:	da01      	bge.n	8001216 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001216:	79fb      	ldrb	r3, [r7, #7]
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	40023c00 	.word	0x40023c00
 8001228:	45670123 	.word	0x45670123
 800122c:	cdef89ab 	.word	0xcdef89ab

08001230 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_FLASH_Lock+0x1c>)
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_FLASH_Lock+0x1c>)
 800123a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800123e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	40023c00 	.word	0x40023c00

08001250 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <FLASH_WaitForLastOperation+0x78>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001262:	f7ff fdbf 	bl	8000de4 <HAL_GetTick>
 8001266:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001268:	e010      	b.n	800128c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001270:	d00c      	beq.n	800128c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d007      	beq.n	8001288 <FLASH_WaitForLastOperation+0x38>
 8001278:	f7ff fdb4 	bl	8000de4 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	d201      	bcs.n	800128c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e019      	b.n	80012c0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <FLASH_WaitForLastOperation+0x7c>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e8      	bne.n	800126a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <FLASH_WaitForLastOperation+0x7c>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <FLASH_WaitForLastOperation+0x7c>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <FLASH_WaitForLastOperation+0x7c>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80012b6:	f000 f8a5 	bl	8001404 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
  
}  
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200017f8 	.word	0x200017f8
 80012cc:	40023c00 	.word	0x40023c00

080012d0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <FLASH_Program_DoubleWord+0x60>)
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	4a13      	ldr	r2, [pc, #76]	; (8001330 <FLASH_Program_DoubleWord+0x60>)
 80012e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <FLASH_Program_DoubleWord+0x60>)
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	4a10      	ldr	r2, [pc, #64]	; (8001330 <FLASH_Program_DoubleWord+0x60>)
 80012ee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80012f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <FLASH_Program_DoubleWord+0x60>)
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <FLASH_Program_DoubleWord+0x60>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001306:	f3bf 8f6f 	isb	sy
}
 800130a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800130c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	000a      	movs	r2, r1
 800131a:	2300      	movs	r3, #0
 800131c:	68f9      	ldr	r1, [r7, #12]
 800131e:	3104      	adds	r1, #4
 8001320:	4613      	mov	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40023c00 	.word	0x40023c00

08001334 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <FLASH_Program_Word+0x40>)
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	4a0c      	ldr	r2, [pc, #48]	; (8001374 <FLASH_Program_Word+0x40>)
 8001344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001348:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <FLASH_Program_Word+0x40>)
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	4a09      	ldr	r2, [pc, #36]	; (8001374 <FLASH_Program_Word+0x40>)
 8001350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001354:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <FLASH_Program_Word+0x40>)
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	4a06      	ldr	r2, [pc, #24]	; (8001374 <FLASH_Program_Word+0x40>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	40023c00 	.word	0x40023c00

08001378 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <FLASH_Program_HalfWord+0x44>)
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	4a0c      	ldr	r2, [pc, #48]	; (80013bc <FLASH_Program_HalfWord+0x44>)
 800138a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800138e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <FLASH_Program_HalfWord+0x44>)
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	4a09      	ldr	r2, [pc, #36]	; (80013bc <FLASH_Program_HalfWord+0x44>)
 8001396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <FLASH_Program_HalfWord+0x44>)
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	4a06      	ldr	r2, [pc, #24]	; (80013bc <FLASH_Program_HalfWord+0x44>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	801a      	strh	r2, [r3, #0]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023c00 	.word	0x40023c00

080013c0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <FLASH_Program_Byte+0x40>)
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <FLASH_Program_Byte+0x40>)
 80013d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <FLASH_Program_Byte+0x40>)
 80013da:	4a09      	ldr	r2, [pc, #36]	; (8001400 <FLASH_Program_Byte+0x40>)
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <FLASH_Program_Byte+0x40>)
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	4a06      	ldr	r2, [pc, #24]	; (8001400 <FLASH_Program_Byte+0x40>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	78fa      	ldrb	r2, [r7, #3]
 80013f0:	701a      	strb	r2, [r3, #0]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40023c00 	.word	0x40023c00

08001404 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001408:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <FLASH_SetErrorCode+0xc4>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	2b00      	cmp	r3, #0
 8001412:	d008      	beq.n	8001426 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001414:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <FLASH_SetErrorCode+0xc8>)
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	4a2b      	ldr	r2, [pc, #172]	; (80014cc <FLASH_SetErrorCode+0xc8>)
 800141e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001420:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <FLASH_SetErrorCode+0xc4>)
 8001422:	2210      	movs	r2, #16
 8001424:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001426:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <FLASH_SetErrorCode+0xc4>)
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	2b00      	cmp	r3, #0
 8001430:	d008      	beq.n	8001444 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <FLASH_SetErrorCode+0xc8>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	4a24      	ldr	r2, [pc, #144]	; (80014cc <FLASH_SetErrorCode+0xc8>)
 800143c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800143e:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <FLASH_SetErrorCode+0xc4>)
 8001440:	2220      	movs	r2, #32
 8001442:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001444:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <FLASH_SetErrorCode+0xc4>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800144c:	2b00      	cmp	r3, #0
 800144e:	d008      	beq.n	8001462 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001450:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <FLASH_SetErrorCode+0xc8>)
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <FLASH_SetErrorCode+0xc8>)
 800145a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <FLASH_SetErrorCode+0xc4>)
 800145e:	2240      	movs	r2, #64	; 0x40
 8001460:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <FLASH_SetErrorCode+0xc4>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146a:	2b00      	cmp	r3, #0
 800146c:	d008      	beq.n	8001480 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <FLASH_SetErrorCode+0xc8>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f043 0302 	orr.w	r3, r3, #2
 8001476:	4a15      	ldr	r2, [pc, #84]	; (80014cc <FLASH_SetErrorCode+0xc8>)
 8001478:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <FLASH_SetErrorCode+0xc4>)
 800147c:	2280      	movs	r2, #128	; 0x80
 800147e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <FLASH_SetErrorCode+0xc4>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001488:	2b00      	cmp	r3, #0
 800148a:	d009      	beq.n	80014a0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <FLASH_SetErrorCode+0xc8>)
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <FLASH_SetErrorCode+0xc8>)
 8001496:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <FLASH_SetErrorCode+0xc4>)
 800149a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800149e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <FLASH_SetErrorCode+0xc4>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d008      	beq.n	80014be <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <FLASH_SetErrorCode+0xc8>)
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	f043 0320 	orr.w	r3, r3, #32
 80014b4:	4a05      	ldr	r2, [pc, #20]	; (80014cc <FLASH_SetErrorCode+0xc8>)
 80014b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <FLASH_SetErrorCode+0xc4>)
 80014ba:	2202      	movs	r2, #2
 80014bc:	60da      	str	r2, [r3, #12]
  }
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	40023c00 	.word	0x40023c00
 80014cc:	200017f8 	.word	0x200017f8

080014d0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80014e2:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <HAL_FLASHEx_Erase+0xd8>)
 80014e4:	7e1b      	ldrb	r3, [r3, #24]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <HAL_FLASHEx_Erase+0x1e>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e058      	b.n	80015a0 <HAL_FLASHEx_Erase+0xd0>
 80014ee:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <HAL_FLASHEx_Erase+0xd8>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014f8:	f7ff feaa 	bl	8001250 <FLASH_WaitForLastOperation>
 80014fc:	4603      	mov	r3, r0
 80014fe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d148      	bne.n	8001598 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d115      	bne.n	8001542 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	4619      	mov	r1, r3
 8001522:	4610      	mov	r0, r2
 8001524:	f000 f844 	bl	80015b0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001528:	f24c 3050 	movw	r0, #50000	; 0xc350
 800152c:	f7ff fe90 	bl	8001250 <FLASH_WaitForLastOperation>
 8001530:	4603      	mov	r3, r0
 8001532:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <HAL_FLASHEx_Erase+0xdc>)
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	4a1c      	ldr	r2, [pc, #112]	; (80015ac <HAL_FLASHEx_Erase+0xdc>)
 800153a:	f023 0304 	bic.w	r3, r3, #4
 800153e:	6113      	str	r3, [r2, #16]
 8001540:	e028      	b.n	8001594 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	e01c      	b.n	8001584 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4619      	mov	r1, r3
 8001552:	68b8      	ldr	r0, [r7, #8]
 8001554:	f000 f850 	bl	80015f8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001558:	f24c 3050 	movw	r0, #50000	; 0xc350
 800155c:	f7ff fe78 	bl	8001250 <FLASH_WaitForLastOperation>
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_FLASHEx_Erase+0xdc>)
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	4a10      	ldr	r2, [pc, #64]	; (80015ac <HAL_FLASHEx_Erase+0xdc>)
 800156a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800156e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	601a      	str	r2, [r3, #0]
          break;
 800157c:	e00a      	b.n	8001594 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	3301      	adds	r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	4413      	add	r3, r2
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	429a      	cmp	r2, r3
 8001592:	d3da      	bcc.n	800154a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001594:	f000 f878 	bl	8001688 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_FLASHEx_Erase+0xd8>)
 800159a:	2200      	movs	r2, #0
 800159c:	761a      	strb	r2, [r3, #24]

  return status;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200017f8 	.word	0x200017f8
 80015ac:	40023c00 	.word	0x40023c00

080015b0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <FLASH_MassErase+0x44>)
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <FLASH_MassErase+0x44>)
 80015c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <FLASH_MassErase+0x44>)
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <FLASH_MassErase+0x44>)
 80015ce:	f043 0304 	orr.w	r3, r3, #4
 80015d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <FLASH_MassErase+0x44>)
 80015d6:	691a      	ldr	r2, [r3, #16]
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	4313      	orrs	r3, r2
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <FLASH_MassErase+0x44>)
 80015e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e4:	6113      	str	r3, [r2, #16]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40023c00 	.word	0x40023c00

080015f8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	e010      	b.n	8001636 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d103      	bne.n	8001622 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800161a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	e009      	b.n	8001636 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001622:	78fb      	ldrb	r3, [r7, #3]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d103      	bne.n	8001630 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	e002      	b.n	8001636 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001630:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001634:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <FLASH_Erase_Sector+0x8c>)
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <FLASH_Erase_Sector+0x8c>)
 800163c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001640:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <FLASH_Erase_Sector+0x8c>)
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	490f      	ldr	r1, [pc, #60]	; (8001684 <FLASH_Erase_Sector+0x8c>)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <FLASH_Erase_Sector+0x8c>)
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <FLASH_Erase_Sector+0x8c>)
 8001654:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001658:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <FLASH_Erase_Sector+0x8c>)
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4313      	orrs	r3, r2
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <FLASH_Erase_Sector+0x8c>)
 8001666:	f043 0302 	orr.w	r3, r3, #2
 800166a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <FLASH_Erase_Sector+0x8c>)
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <FLASH_Erase_Sector+0x8c>)
 8001672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001676:	6113      	str	r3, [r2, #16]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	40023c00 	.word	0x40023c00

08001688 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800168c:	4b20      	ldr	r3, [pc, #128]	; (8001710 <FLASH_FlushCaches+0x88>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001694:	2b00      	cmp	r3, #0
 8001696:	d017      	beq.n	80016c8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <FLASH_FlushCaches+0x88>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <FLASH_FlushCaches+0x88>)
 800169e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80016a2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <FLASH_FlushCaches+0x88>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a19      	ldr	r2, [pc, #100]	; (8001710 <FLASH_FlushCaches+0x88>)
 80016aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <FLASH_FlushCaches+0x88>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a16      	ldr	r2, [pc, #88]	; (8001710 <FLASH_FlushCaches+0x88>)
 80016b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016ba:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <FLASH_FlushCaches+0x88>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a13      	ldr	r2, [pc, #76]	; (8001710 <FLASH_FlushCaches+0x88>)
 80016c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <FLASH_FlushCaches+0x88>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d017      	beq.n	8001704 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <FLASH_FlushCaches+0x88>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0d      	ldr	r2, [pc, #52]	; (8001710 <FLASH_FlushCaches+0x88>)
 80016da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016de:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <FLASH_FlushCaches+0x88>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <FLASH_FlushCaches+0x88>)
 80016e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <FLASH_FlushCaches+0x88>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a07      	ldr	r2, [pc, #28]	; (8001710 <FLASH_FlushCaches+0x88>)
 80016f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016f6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <FLASH_FlushCaches+0x88>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <FLASH_FlushCaches+0x88>)
 80016fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001702:	6013      	str	r3, [r2, #0]
  }
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023c00 	.word	0x40023c00

08001714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	e159      	b.n	80019e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001730:	2201      	movs	r2, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	429a      	cmp	r2, r3
 800174a:	f040 8148 	bne.w	80019de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	2b01      	cmp	r3, #1
 8001758:	d005      	beq.n	8001766 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001762:	2b02      	cmp	r3, #2
 8001764:	d130      	bne.n	80017c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800179c:	2201      	movs	r2, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 0201 	and.w	r2, r3, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d017      	beq.n	8001804 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d123      	bne.n	8001858 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	08da      	lsrs	r2, r3, #3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3208      	adds	r2, #8
 8001818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	220f      	movs	r2, #15
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	08da      	lsrs	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3208      	adds	r2, #8
 8001852:	69b9      	ldr	r1, [r7, #24]
 8001854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0203 	and.w	r2, r3, #3
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80a2 	beq.w	80019de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b57      	ldr	r3, [pc, #348]	; (80019fc <HAL_GPIO_Init+0x2e8>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a56      	ldr	r2, [pc, #344]	; (80019fc <HAL_GPIO_Init+0x2e8>)
 80018a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b54      	ldr	r3, [pc, #336]	; (80019fc <HAL_GPIO_Init+0x2e8>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b6:	4a52      	ldr	r2, [pc, #328]	; (8001a00 <HAL_GPIO_Init+0x2ec>)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	3302      	adds	r3, #2
 80018be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	220f      	movs	r2, #15
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a49      	ldr	r2, [pc, #292]	; (8001a04 <HAL_GPIO_Init+0x2f0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d019      	beq.n	8001916 <HAL_GPIO_Init+0x202>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a48      	ldr	r2, [pc, #288]	; (8001a08 <HAL_GPIO_Init+0x2f4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d013      	beq.n	8001912 <HAL_GPIO_Init+0x1fe>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a47      	ldr	r2, [pc, #284]	; (8001a0c <HAL_GPIO_Init+0x2f8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d00d      	beq.n	800190e <HAL_GPIO_Init+0x1fa>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a46      	ldr	r2, [pc, #280]	; (8001a10 <HAL_GPIO_Init+0x2fc>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d007      	beq.n	800190a <HAL_GPIO_Init+0x1f6>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a45      	ldr	r2, [pc, #276]	; (8001a14 <HAL_GPIO_Init+0x300>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d101      	bne.n	8001906 <HAL_GPIO_Init+0x1f2>
 8001902:	2304      	movs	r3, #4
 8001904:	e008      	b.n	8001918 <HAL_GPIO_Init+0x204>
 8001906:	2307      	movs	r3, #7
 8001908:	e006      	b.n	8001918 <HAL_GPIO_Init+0x204>
 800190a:	2303      	movs	r3, #3
 800190c:	e004      	b.n	8001918 <HAL_GPIO_Init+0x204>
 800190e:	2302      	movs	r3, #2
 8001910:	e002      	b.n	8001918 <HAL_GPIO_Init+0x204>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <HAL_GPIO_Init+0x204>
 8001916:	2300      	movs	r3, #0
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	f002 0203 	and.w	r2, r2, #3
 800191e:	0092      	lsls	r2, r2, #2
 8001920:	4093      	lsls	r3, r2
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001928:	4935      	ldr	r1, [pc, #212]	; (8001a00 <HAL_GPIO_Init+0x2ec>)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	3302      	adds	r3, #2
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001936:	4b38      	ldr	r3, [pc, #224]	; (8001a18 <HAL_GPIO_Init+0x304>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800195a:	4a2f      	ldr	r2, [pc, #188]	; (8001a18 <HAL_GPIO_Init+0x304>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001960:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_GPIO_Init+0x304>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001984:	4a24      	ldr	r2, [pc, #144]	; (8001a18 <HAL_GPIO_Init+0x304>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800198a:	4b23      	ldr	r3, [pc, #140]	; (8001a18 <HAL_GPIO_Init+0x304>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ae:	4a1a      	ldr	r2, [pc, #104]	; (8001a18 <HAL_GPIO_Init+0x304>)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019b4:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <HAL_GPIO_Init+0x304>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019d8:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <HAL_GPIO_Init+0x304>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3301      	adds	r3, #1
 80019e2:	61fb      	str	r3, [r7, #28]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	2b0f      	cmp	r3, #15
 80019e8:	f67f aea2 	bls.w	8001730 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3724      	adds	r7, #36	; 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40013800 	.word	0x40013800
 8001a04:	40020000 	.word	0x40020000
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	40020c00 	.word	0x40020c00
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40013c00 	.word	0x40013c00

08001a1c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e0bb      	b.n	8001bb0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4013      	ands	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	f040 80ab 	bne.w	8001baa <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001a54:	4a5c      	ldr	r2, [pc, #368]	; (8001bc8 <HAL_GPIO_DeInit+0x1ac>)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a60:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	4013      	ands	r3, r2
 8001a74:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a54      	ldr	r2, [pc, #336]	; (8001bcc <HAL_GPIO_DeInit+0x1b0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d019      	beq.n	8001ab2 <HAL_GPIO_DeInit+0x96>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a53      	ldr	r2, [pc, #332]	; (8001bd0 <HAL_GPIO_DeInit+0x1b4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_GPIO_DeInit+0x92>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a52      	ldr	r2, [pc, #328]	; (8001bd4 <HAL_GPIO_DeInit+0x1b8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d00d      	beq.n	8001aaa <HAL_GPIO_DeInit+0x8e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a51      	ldr	r2, [pc, #324]	; (8001bd8 <HAL_GPIO_DeInit+0x1bc>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d007      	beq.n	8001aa6 <HAL_GPIO_DeInit+0x8a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a50      	ldr	r2, [pc, #320]	; (8001bdc <HAL_GPIO_DeInit+0x1c0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d101      	bne.n	8001aa2 <HAL_GPIO_DeInit+0x86>
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	e008      	b.n	8001ab4 <HAL_GPIO_DeInit+0x98>
 8001aa2:	2307      	movs	r3, #7
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_DeInit+0x98>
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e004      	b.n	8001ab4 <HAL_GPIO_DeInit+0x98>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e002      	b.n	8001ab4 <HAL_GPIO_DeInit+0x98>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_GPIO_DeInit+0x98>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	f002 0203 	and.w	r2, r2, #3
 8001aba:	0092      	lsls	r2, r2, #2
 8001abc:	4093      	lsls	r3, r2
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d132      	bne.n	8001b2a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001ac4:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <HAL_GPIO_DeInit+0x1c4>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	4944      	ldr	r1, [pc, #272]	; (8001be0 <HAL_GPIO_DeInit+0x1c4>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001ad2:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <HAL_GPIO_DeInit+0x1c4>)
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	4941      	ldr	r1, [pc, #260]	; (8001be0 <HAL_GPIO_DeInit+0x1c4>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001ae0:	4b3f      	ldr	r3, [pc, #252]	; (8001be0 <HAL_GPIO_DeInit+0x1c4>)
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	493d      	ldr	r1, [pc, #244]	; (8001be0 <HAL_GPIO_DeInit+0x1c4>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001aee:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <HAL_GPIO_DeInit+0x1c4>)
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	493a      	ldr	r1, [pc, #232]	; (8001be0 <HAL_GPIO_DeInit+0x1c4>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001b0c:	4a2e      	ldr	r2, [pc, #184]	; (8001bc8 <HAL_GPIO_DeInit+0x1ac>)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	3302      	adds	r3, #2
 8001b14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	482a      	ldr	r0, [pc, #168]	; (8001bc8 <HAL_GPIO_DeInit+0x1ac>)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	400a      	ands	r2, r1
 8001b24:	3302      	adds	r3, #2
 8001b26:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2103      	movs	r1, #3
 8001b34:	fa01 f303 	lsl.w	r3, r1, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	08da      	lsrs	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3208      	adds	r2, #8
 8001b48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	220f      	movs	r2, #15
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	08d2      	lsrs	r2, r2, #3
 8001b60:	4019      	ands	r1, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2103      	movs	r1, #3
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	2101      	movs	r1, #1
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	401a      	ands	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2103      	movs	r1, #3
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3301      	adds	r3, #1
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	2b0f      	cmp	r3, #15
 8001bb4:	f67f af40 	bls.w	8001a38 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	371c      	adds	r7, #28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40013800 	.word	0x40013800
 8001bcc:	40020000 	.word	0x40020000
 8001bd0:	40020400 	.word	0x40020400
 8001bd4:	40020800 	.word	0x40020800
 8001bd8:	40020c00 	.word	0x40020c00
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40013c00 	.word	0x40013c00

08001be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf4:	787b      	ldrb	r3, [r7, #1]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfa:	887a      	ldrh	r2, [r7, #2]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c00:	e003      	b.n	8001c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	041a      	lsls	r2, r3, #16
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	619a      	str	r2, [r3, #24]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e264      	b.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d075      	beq.n	8001d22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c36:	4ba3      	ldr	r3, [pc, #652]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d00c      	beq.n	8001c5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c42:	4ba0      	ldr	r3, [pc, #640]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d112      	bne.n	8001c74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c4e:	4b9d      	ldr	r3, [pc, #628]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c5a:	d10b      	bne.n	8001c74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	4b99      	ldr	r3, [pc, #612]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d05b      	beq.n	8001d20 <HAL_RCC_OscConfig+0x108>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d157      	bne.n	8001d20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e23f      	b.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7c:	d106      	bne.n	8001c8c <HAL_RCC_OscConfig+0x74>
 8001c7e:	4b91      	ldr	r3, [pc, #580]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a90      	ldr	r2, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e01d      	b.n	8001cc8 <HAL_RCC_OscConfig+0xb0>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x98>
 8001c96:	4b8b      	ldr	r3, [pc, #556]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	4b88      	ldr	r3, [pc, #544]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a87      	ldr	r2, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e00b      	b.n	8001cc8 <HAL_RCC_OscConfig+0xb0>
 8001cb0:	4b84      	ldr	r3, [pc, #528]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a83      	ldr	r2, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	4b81      	ldr	r3, [pc, #516]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a80      	ldr	r2, [pc, #512]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d013      	beq.n	8001cf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff f888 	bl	8000de4 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff f884 	bl	8000de4 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e204      	b.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0xc0>
 8001cf6:	e014      	b.n	8001d22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff f874 	bl	8000de4 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff f870 	bl	8000de4 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e1f0      	b.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	4b6c      	ldr	r3, [pc, #432]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0xe8>
 8001d1e:	e000      	b.n	8001d22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d063      	beq.n	8001df6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d2e:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00b      	beq.n	8001d52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d3a:	4b62      	ldr	r3, [pc, #392]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d11c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d46:	4b5f      	ldr	r3, [pc, #380]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d116      	bne.n	8001d80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d52:	4b5c      	ldr	r3, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d005      	beq.n	8001d6a <HAL_RCC_OscConfig+0x152>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d001      	beq.n	8001d6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e1c4      	b.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6a:	4b56      	ldr	r3, [pc, #344]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4952      	ldr	r1, [pc, #328]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7e:	e03a      	b.n	8001df6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d020      	beq.n	8001dca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d88:	4b4f      	ldr	r3, [pc, #316]	; (8001ec8 <HAL_RCC_OscConfig+0x2b0>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7ff f829 	bl	8000de4 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d96:	f7ff f825 	bl	8000de4 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e1a5      	b.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	4b46      	ldr	r3, [pc, #280]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db4:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4940      	ldr	r1, [pc, #256]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	600b      	str	r3, [r1, #0]
 8001dc8:	e015      	b.n	8001df6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dca:	4b3f      	ldr	r3, [pc, #252]	; (8001ec8 <HAL_RCC_OscConfig+0x2b0>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7ff f808 	bl	8000de4 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd8:	f7ff f804 	bl	8000de4 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e184      	b.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d030      	beq.n	8001e64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d016      	beq.n	8001e38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0a:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <HAL_RCC_OscConfig+0x2b4>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e10:	f7fe ffe8 	bl	8000de4 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e18:	f7fe ffe4 	bl	8000de4 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e164      	b.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2a:	4b26      	ldr	r3, [pc, #152]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x200>
 8001e36:	e015      	b.n	8001e64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e38:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <HAL_RCC_OscConfig+0x2b4>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3e:	f7fe ffd1 	bl	8000de4 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e46:	f7fe ffcd 	bl	8000de4 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e14d      	b.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e58:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f0      	bne.n	8001e46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80a0 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e76:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10f      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e90:	6413      	str	r3, [r2, #64]	; 0x40
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_RCC_OscConfig+0x2b8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d121      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_RCC_OscConfig+0x2b8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a07      	ldr	r2, [pc, #28]	; (8001ed0 <HAL_RCC_OscConfig+0x2b8>)
 8001eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eba:	f7fe ff93 	bl	8000de4 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	e011      	b.n	8001ee6 <HAL_RCC_OscConfig+0x2ce>
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	42470000 	.word	0x42470000
 8001ecc:	42470e80 	.word	0x42470e80
 8001ed0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed4:	f7fe ff86 	bl	8000de4 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e106      	b.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee6:	4b85      	ldr	r3, [pc, #532]	; (80020fc <HAL_RCC_OscConfig+0x4e4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d106      	bne.n	8001f08 <HAL_RCC_OscConfig+0x2f0>
 8001efa:	4b81      	ldr	r3, [pc, #516]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	4a80      	ldr	r2, [pc, #512]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6713      	str	r3, [r2, #112]	; 0x70
 8001f06:	e01c      	b.n	8001f42 <HAL_RCC_OscConfig+0x32a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	d10c      	bne.n	8001f2a <HAL_RCC_OscConfig+0x312>
 8001f10:	4b7b      	ldr	r3, [pc, #492]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f14:	4a7a      	ldr	r2, [pc, #488]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1c:	4b78      	ldr	r3, [pc, #480]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	4a77      	ldr	r2, [pc, #476]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6713      	str	r3, [r2, #112]	; 0x70
 8001f28:	e00b      	b.n	8001f42 <HAL_RCC_OscConfig+0x32a>
 8001f2a:	4b75      	ldr	r3, [pc, #468]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2e:	4a74      	ldr	r2, [pc, #464]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	6713      	str	r3, [r2, #112]	; 0x70
 8001f36:	4b72      	ldr	r3, [pc, #456]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3a:	4a71      	ldr	r2, [pc, #452]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f3c:	f023 0304 	bic.w	r3, r3, #4
 8001f40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d015      	beq.n	8001f76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4a:	f7fe ff4b 	bl	8000de4 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f7fe ff47 	bl	8000de4 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0c5      	b.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f68:	4b65      	ldr	r3, [pc, #404]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0ee      	beq.n	8001f52 <HAL_RCC_OscConfig+0x33a>
 8001f74:	e014      	b.n	8001fa0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f76:	f7fe ff35 	bl	8000de4 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f7e:	f7fe ff31 	bl	8000de4 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e0af      	b.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f94:	4b5a      	ldr	r3, [pc, #360]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ee      	bne.n	8001f7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d105      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa6:	4b56      	ldr	r3, [pc, #344]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	4a55      	ldr	r2, [pc, #340]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 809b 	beq.w	80020f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fbc:	4b50      	ldr	r3, [pc, #320]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d05c      	beq.n	8002082 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d141      	bne.n	8002054 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd0:	4b4c      	ldr	r3, [pc, #304]	; (8002104 <HAL_RCC_OscConfig+0x4ec>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7fe ff05 	bl	8000de4 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fde:	f7fe ff01 	bl	8000de4 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e081      	b.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff0:	4b43      	ldr	r3, [pc, #268]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f0      	bne.n	8001fde <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69da      	ldr	r2, [r3, #28]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	019b      	lsls	r3, r3, #6
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	3b01      	subs	r3, #1
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	061b      	lsls	r3, r3, #24
 8002020:	4937      	ldr	r1, [pc, #220]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002026:	4b37      	ldr	r3, [pc, #220]	; (8002104 <HAL_RCC_OscConfig+0x4ec>)
 8002028:	2201      	movs	r2, #1
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7fe feda 	bl	8000de4 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002034:	f7fe fed6 	bl	8000de4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e056      	b.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x41c>
 8002052:	e04e      	b.n	80020f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002054:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <HAL_RCC_OscConfig+0x4ec>)
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205a:	f7fe fec3 	bl	8000de4 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002062:	f7fe febf 	bl	8000de4 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e03f      	b.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f0      	bne.n	8002062 <HAL_RCC_OscConfig+0x44a>
 8002080:	e037      	b.n	80020f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e032      	b.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800208e:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d028      	beq.n	80020ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d121      	bne.n	80020ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d11a      	bne.n	80020ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020be:	4013      	ands	r3, r2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d111      	bne.n	80020ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	085b      	lsrs	r3, r3, #1
 80020d6:	3b01      	subs	r3, #1
 80020d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020da:	429a      	cmp	r2, r3
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40007000 	.word	0x40007000
 8002100:	40023800 	.word	0x40023800
 8002104:	42470060 	.word	0x42470060

08002108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0cc      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b68      	ldr	r3, [pc, #416]	; (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d90c      	bls.n	8002144 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b65      	ldr	r3, [pc, #404]	; (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002132:	4b63      	ldr	r3, [pc, #396]	; (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0b8      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d020      	beq.n	8002192 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800215c:	4b59      	ldr	r3, [pc, #356]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	4a58      	ldr	r2, [pc, #352]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002166:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002174:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4a52      	ldr	r2, [pc, #328]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800217e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002180:	4b50      	ldr	r3, [pc, #320]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	494d      	ldr	r1, [pc, #308]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	4313      	orrs	r3, r2
 8002190:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d044      	beq.n	8002228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d107      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	4b47      	ldr	r3, [pc, #284]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d119      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e07f      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d003      	beq.n	80021c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c6:	4b3f      	ldr	r3, [pc, #252]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e06f      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d6:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e067      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e6:	4b37      	ldr	r3, [pc, #220]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f023 0203 	bic.w	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4934      	ldr	r1, [pc, #208]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f8:	f7fe fdf4 	bl	8000de4 <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002200:	f7fe fdf0 	bl	8000de4 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e04f      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 020c 	and.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	429a      	cmp	r2, r3
 8002226:	d1eb      	bne.n	8002200 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d20c      	bcs.n	8002250 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e032      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	4916      	ldr	r1, [pc, #88]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d009      	beq.n	800228e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800227a:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	490e      	ldr	r1, [pc, #56]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800228e:	f000 f821 	bl	80022d4 <HAL_RCC_GetSysClockFreq>
 8002292:	4602      	mov	r2, r0
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	490a      	ldr	r1, [pc, #40]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	5ccb      	ldrb	r3, [r1, r3]
 80022a2:	fa22 f303 	lsr.w	r3, r2, r3
 80022a6:	4a09      	ldr	r2, [pc, #36]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <HAL_RCC_ClockConfig+0x1c8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe fd54 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023c00 	.word	0x40023c00
 80022c4:	40023800 	.word	0x40023800
 80022c8:	08003648 	.word	0x08003648
 80022cc:	20000000 	.word	0x20000000
 80022d0:	20000004 	.word	0x20000004

080022d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d4:	b5b0      	push	{r4, r5, r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022da:	2100      	movs	r1, #0
 80022dc:	6079      	str	r1, [r7, #4]
 80022de:	2100      	movs	r1, #0
 80022e0:	60f9      	str	r1, [r7, #12]
 80022e2:	2100      	movs	r1, #0
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022e6:	2100      	movs	r1, #0
 80022e8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022ea:	4952      	ldr	r1, [pc, #328]	; (8002434 <HAL_RCC_GetSysClockFreq+0x160>)
 80022ec:	6889      	ldr	r1, [r1, #8]
 80022ee:	f001 010c 	and.w	r1, r1, #12
 80022f2:	2908      	cmp	r1, #8
 80022f4:	d00d      	beq.n	8002312 <HAL_RCC_GetSysClockFreq+0x3e>
 80022f6:	2908      	cmp	r1, #8
 80022f8:	f200 8094 	bhi.w	8002424 <HAL_RCC_GetSysClockFreq+0x150>
 80022fc:	2900      	cmp	r1, #0
 80022fe:	d002      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0x32>
 8002300:	2904      	cmp	r1, #4
 8002302:	d003      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x38>
 8002304:	e08e      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002306:	4b4c      	ldr	r3, [pc, #304]	; (8002438 <HAL_RCC_GetSysClockFreq+0x164>)
 8002308:	60bb      	str	r3, [r7, #8]
       break;
 800230a:	e08e      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800230c:	4b4b      	ldr	r3, [pc, #300]	; (800243c <HAL_RCC_GetSysClockFreq+0x168>)
 800230e:	60bb      	str	r3, [r7, #8]
      break;
 8002310:	e08b      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002312:	4948      	ldr	r1, [pc, #288]	; (8002434 <HAL_RCC_GetSysClockFreq+0x160>)
 8002314:	6849      	ldr	r1, [r1, #4]
 8002316:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800231a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800231c:	4945      	ldr	r1, [pc, #276]	; (8002434 <HAL_RCC_GetSysClockFreq+0x160>)
 800231e:	6849      	ldr	r1, [r1, #4]
 8002320:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002324:	2900      	cmp	r1, #0
 8002326:	d024      	beq.n	8002372 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002328:	4942      	ldr	r1, [pc, #264]	; (8002434 <HAL_RCC_GetSysClockFreq+0x160>)
 800232a:	6849      	ldr	r1, [r1, #4]
 800232c:	0989      	lsrs	r1, r1, #6
 800232e:	4608      	mov	r0, r1
 8002330:	f04f 0100 	mov.w	r1, #0
 8002334:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002338:	f04f 0500 	mov.w	r5, #0
 800233c:	ea00 0204 	and.w	r2, r0, r4
 8002340:	ea01 0305 	and.w	r3, r1, r5
 8002344:	493d      	ldr	r1, [pc, #244]	; (800243c <HAL_RCC_GetSysClockFreq+0x168>)
 8002346:	fb01 f003 	mul.w	r0, r1, r3
 800234a:	2100      	movs	r1, #0
 800234c:	fb01 f102 	mul.w	r1, r1, r2
 8002350:	1844      	adds	r4, r0, r1
 8002352:	493a      	ldr	r1, [pc, #232]	; (800243c <HAL_RCC_GetSysClockFreq+0x168>)
 8002354:	fba2 0101 	umull	r0, r1, r2, r1
 8002358:	1863      	adds	r3, r4, r1
 800235a:	4619      	mov	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	461a      	mov	r2, r3
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	f7fd ff38 	bl	80001d8 <__aeabi_uldivmod>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4613      	mov	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	e04a      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002372:	4b30      	ldr	r3, [pc, #192]	; (8002434 <HAL_RCC_GetSysClockFreq+0x160>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	099b      	lsrs	r3, r3, #6
 8002378:	461a      	mov	r2, r3
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002382:	f04f 0100 	mov.w	r1, #0
 8002386:	ea02 0400 	and.w	r4, r2, r0
 800238a:	ea03 0501 	and.w	r5, r3, r1
 800238e:	4620      	mov	r0, r4
 8002390:	4629      	mov	r1, r5
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	014b      	lsls	r3, r1, #5
 800239c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023a0:	0142      	lsls	r2, r0, #5
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	1b00      	subs	r0, r0, r4
 80023a8:	eb61 0105 	sbc.w	r1, r1, r5
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	018b      	lsls	r3, r1, #6
 80023b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023ba:	0182      	lsls	r2, r0, #6
 80023bc:	1a12      	subs	r2, r2, r0
 80023be:	eb63 0301 	sbc.w	r3, r3, r1
 80023c2:	f04f 0000 	mov.w	r0, #0
 80023c6:	f04f 0100 	mov.w	r1, #0
 80023ca:	00d9      	lsls	r1, r3, #3
 80023cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023d0:	00d0      	lsls	r0, r2, #3
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	1912      	adds	r2, r2, r4
 80023d8:	eb45 0303 	adc.w	r3, r5, r3
 80023dc:	f04f 0000 	mov.w	r0, #0
 80023e0:	f04f 0100 	mov.w	r1, #0
 80023e4:	0299      	lsls	r1, r3, #10
 80023e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80023ea:	0290      	lsls	r0, r2, #10
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	461a      	mov	r2, r3
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	f7fd feec 	bl	80001d8 <__aeabi_uldivmod>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4613      	mov	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_RCC_GetSysClockFreq+0x160>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	3301      	adds	r3, #1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	60bb      	str	r3, [r7, #8]
      break;
 8002422:	e002      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <HAL_RCC_GetSysClockFreq+0x164>)
 8002426:	60bb      	str	r3, [r7, #8]
      break;
 8002428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800242a:	68bb      	ldr	r3, [r7, #8]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bdb0      	pop	{r4, r5, r7, pc}
 8002434:	40023800 	.word	0x40023800
 8002438:	00f42400 	.word	0x00f42400
 800243c:	017d7840 	.word	0x017d7840

08002440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <HAL_RCC_GetHCLKFreq+0x14>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20000000 	.word	0x20000000

08002458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800245c:	f7ff fff0 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	0a9b      	lsrs	r3, r3, #10
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4903      	ldr	r1, [pc, #12]	; (800247c <HAL_RCC_GetPCLK1Freq+0x24>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800
 800247c:	08003658 	.word	0x08003658

08002480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002484:	f7ff ffdc 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	0b5b      	lsrs	r3, r3, #13
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4903      	ldr	r1, [pc, #12]	; (80024a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	08003658 	.word	0x08003658

080024a8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80024ae:	f7fe fc99 	bl	8000de4 <HAL_GetTick>
 80024b2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80024b4:	4b5d      	ldr	r3, [pc, #372]	; (800262c <HAL_RCC_DeInit+0x184>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a5c      	ldr	r2, [pc, #368]	; (800262c <HAL_RCC_DeInit+0x184>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c2:	f7fe fc8f 	bl	8000de4 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e0a7      	b.n	8002624 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80024d4:	4b55      	ldr	r3, [pc, #340]	; (800262c <HAL_RCC_DeInit+0x184>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80024e0:	4b52      	ldr	r3, [pc, #328]	; (800262c <HAL_RCC_DeInit+0x184>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a51      	ldr	r2, [pc, #324]	; (800262c <HAL_RCC_DeInit+0x184>)
 80024e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80024ec:	f7fe fc7a 	bl	8000de4 <HAL_GetTick>
 80024f0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80024f2:	4b4e      	ldr	r3, [pc, #312]	; (800262c <HAL_RCC_DeInit+0x184>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fa:	f7fe fc73 	bl	8000de4 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	; 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e089      	b.n	8002624 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002510:	4b46      	ldr	r3, [pc, #280]	; (800262c <HAL_RCC_DeInit+0x184>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1ee      	bne.n	80024fa <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800251c:	f7fe fc62 	bl	8000de4 <HAL_GetTick>
 8002520:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002522:	4b42      	ldr	r3, [pc, #264]	; (800262c <HAL_RCC_DeInit+0x184>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a41      	ldr	r2, [pc, #260]	; (800262c <HAL_RCC_DeInit+0x184>)
 8002528:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800252c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002530:	f7fe fc58 	bl	8000de4 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e070      	b.n	8002624 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002542:	4b3a      	ldr	r3, [pc, #232]	; (800262c <HAL_RCC_DeInit+0x184>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800254e:	f7fe fc49 	bl	8000de4 <HAL_GetTick>
 8002552:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002554:	4b35      	ldr	r3, [pc, #212]	; (800262c <HAL_RCC_DeInit+0x184>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a34      	ldr	r2, [pc, #208]	; (800262c <HAL_RCC_DeInit+0x184>)
 800255a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800255e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002562:	f7fe fc3f 	bl	8000de4 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e057      	b.n	8002624 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002574:	4b2d      	ldr	r3, [pc, #180]	; (800262c <HAL_RCC_DeInit+0x184>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1f0      	bne.n	8002562 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002580:	f7fe fc30 	bl	8000de4 <HAL_GetTick>
 8002584:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002586:	4b29      	ldr	r3, [pc, #164]	; (800262c <HAL_RCC_DeInit+0x184>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a28      	ldr	r2, [pc, #160]	; (800262c <HAL_RCC_DeInit+0x184>)
 800258c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002590:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002594:	f7fe fc26 	bl	8000de4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e03e      	b.n	8002624 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80025a6:	4b21      	ldr	r3, [pc, #132]	; (800262c <HAL_RCC_DeInit+0x184>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80025b2:	4b1e      	ldr	r3, [pc, #120]	; (800262c <HAL_RCC_DeInit+0x184>)
 80025b4:	4a1e      	ldr	r2, [pc, #120]	; (8002630 <HAL_RCC_DeInit+0x188>)
 80025b6:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80025b8:	4b1c      	ldr	r3, [pc, #112]	; (800262c <HAL_RCC_DeInit+0x184>)
 80025ba:	4a1e      	ldr	r2, [pc, #120]	; (8002634 <HAL_RCC_DeInit+0x18c>)
 80025bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80025c0:	4b1a      	ldr	r3, [pc, #104]	; (800262c <HAL_RCC_DeInit+0x184>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4a19      	ldr	r2, [pc, #100]	; (800262c <HAL_RCC_DeInit+0x184>)
 80025c6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80025ca:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80025cc:	4b17      	ldr	r3, [pc, #92]	; (800262c <HAL_RCC_DeInit+0x184>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4a16      	ldr	r2, [pc, #88]	; (800262c <HAL_RCC_DeInit+0x184>)
 80025d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025d6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <HAL_RCC_DeInit+0x184>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4a13      	ldr	r2, [pc, #76]	; (800262c <HAL_RCC_DeInit+0x184>)
 80025de:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80025e2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80025e4:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_RCC_DeInit+0x184>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4a10      	ldr	r2, [pc, #64]	; (800262c <HAL_RCC_DeInit+0x184>)
 80025ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025ee:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80025f0:	4b0e      	ldr	r3, [pc, #56]	; (800262c <HAL_RCC_DeInit+0x184>)
 80025f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f4:	4a0d      	ldr	r2, [pc, #52]	; (800262c <HAL_RCC_DeInit+0x184>)
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_DeInit+0x184>)
 80025fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002600:	4a0a      	ldr	r2, [pc, #40]	; (800262c <HAL_RCC_DeInit+0x184>)
 8002602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002606:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_RCC_DeInit+0x190>)
 800260a:	4a0c      	ldr	r2, [pc, #48]	; (800263c <HAL_RCC_DeInit+0x194>)
 800260c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_RCC_DeInit+0x198>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fba2 	bl	8000d5c <HAL_InitTick>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8002622:	2300      	movs	r3, #0
  }
}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40023800 	.word	0x40023800
 8002630:	04003010 	.word	0x04003010
 8002634:	20003010 	.word	0x20003010
 8002638:	20000000 	.word	0x20000000
 800263c:	00f42400 	.word	0x00f42400
 8002640:	20000004 	.word	0x20000004

08002644 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e03f      	b.n	80026d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7fe fa60 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2224      	movs	r2, #36	; 0x24
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002686:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 fddb 	bl	8003244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800269c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b08a      	sub	sp, #40	; 0x28
 80026e2:	af02      	add	r7, sp, #8
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	4613      	mov	r3, r2
 80026ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b20      	cmp	r3, #32
 80026fc:	d17c      	bne.n	80027f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <HAL_UART_Transmit+0x2c>
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e075      	b.n	80027fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_UART_Transmit+0x3e>
 8002718:	2302      	movs	r3, #2
 800271a:	e06e      	b.n	80027fa <HAL_UART_Transmit+0x11c>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2221      	movs	r2, #33	; 0x21
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002732:	f7fe fb57 	bl	8000de4 <HAL_GetTick>
 8002736:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	88fa      	ldrh	r2, [r7, #6]
 800273c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	88fa      	ldrh	r2, [r7, #6]
 8002742:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274c:	d108      	bne.n	8002760 <HAL_UART_Transmit+0x82>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d104      	bne.n	8002760 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	e003      	b.n	8002768 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002770:	e02a      	b.n	80027c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2200      	movs	r2, #0
 800277a:	2180      	movs	r1, #128	; 0x80
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fb1f 	bl	8002dc0 <UART_WaitOnFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e036      	b.n	80027fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10b      	bne.n	80027aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	3302      	adds	r3, #2
 80027a6:	61bb      	str	r3, [r7, #24]
 80027a8:	e007      	b.n	80027ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	781a      	ldrb	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	3301      	adds	r3, #1
 80027b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1cf      	bne.n	8002772 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2200      	movs	r2, #0
 80027da:	2140      	movs	r1, #64	; 0x40
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 faef 	bl	8002dc0 <UART_WaitOnFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e006      	b.n	80027fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e000      	b.n	80027fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
  }
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3720      	adds	r7, #32
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	4613      	mov	r3, r2
 800280e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b20      	cmp	r3, #32
 800281a:	d11d      	bne.n	8002858 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_UART_Receive_IT+0x26>
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e016      	b.n	800285a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_UART_Receive_IT+0x38>
 8002836:	2302      	movs	r3, #2
 8002838:	e00f      	b.n	800285a <HAL_UART_Receive_IT+0x58>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	461a      	mov	r2, r3
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fb24 	bl	8002e9c <UART_Start_Receive_IT>
 8002854:	4603      	mov	r3, r0
 8002856:	e000      	b.n	800285a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002858:	2302      	movs	r3, #2
  }
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b0ba      	sub	sp, #232	; 0xe8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002890:	2300      	movs	r3, #0
 8002892:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80028a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10f      	bne.n	80028ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_UART_IRQHandler+0x66>
 80028b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fc03 	bl	80030ce <UART_Receive_IT>
      return;
 80028c8:	e256      	b.n	8002d78 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80028ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 80de 	beq.w	8002a90 <HAL_UART_IRQHandler+0x22c>
 80028d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d106      	bne.n	80028ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80d1 	beq.w	8002a90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00b      	beq.n	8002912 <HAL_UART_IRQHandler+0xae>
 80028fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f043 0201 	orr.w	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <HAL_UART_IRQHandler+0xd2>
 800291e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f043 0202 	orr.w	r2, r3, #2
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00b      	beq.n	800295a <HAL_UART_IRQHandler+0xf6>
 8002942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f043 0204 	orr.w	r2, r3, #4
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800295a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d011      	beq.n	800298a <HAL_UART_IRQHandler+0x126>
 8002966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d105      	bne.n	800297e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f043 0208 	orr.w	r2, r3, #8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 81ed 	beq.w	8002d6e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_UART_IRQHandler+0x14e>
 80029a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 fb8e 	bl	80030ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029bc:	2b40      	cmp	r3, #64	; 0x40
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d103      	bne.n	80029de <HAL_UART_IRQHandler+0x17a>
 80029d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d04f      	beq.n	8002a7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fa96 	bl	8002f10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ee:	2b40      	cmp	r3, #64	; 0x40
 80029f0:	d141      	bne.n	8002a76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3314      	adds	r3, #20
 80029f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a00:	e853 3f00 	ldrex	r3, [r3]
 8002a04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3314      	adds	r3, #20
 8002a1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a2e:	e841 2300 	strex	r3, r2, [r1]
 8002a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1d9      	bne.n	80029f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d013      	beq.n	8002a6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4a:	4a7d      	ldr	r2, [pc, #500]	; (8002c40 <HAL_UART_IRQHandler+0x3dc>)
 8002a4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe fb53 	bl	80010fe <HAL_DMA_Abort_IT>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d016      	beq.n	8002a8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a6c:	e00e      	b.n	8002a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f990 	bl	8002d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a74:	e00a      	b.n	8002a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f98c 	bl	8002d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a7c:	e006      	b.n	8002a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f988 	bl	8002d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a8a:	e170      	b.n	8002d6e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8c:	bf00      	nop
    return;
 8002a8e:	e16e      	b.n	8002d6e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	f040 814a 	bne.w	8002d2e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 8143 	beq.w	8002d2e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 813c 	beq.w	8002d2e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b40      	cmp	r3, #64	; 0x40
 8002ad8:	f040 80b4 	bne.w	8002c44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ae8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8140 	beq.w	8002d72 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002afa:	429a      	cmp	r2, r3
 8002afc:	f080 8139 	bcs.w	8002d72 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b12:	f000 8088 	beq.w	8002c26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	330c      	adds	r3, #12
 8002b1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b24:	e853 3f00 	ldrex	r3, [r3]
 8002b28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b52:	e841 2300 	strex	r3, r2, [r1]
 8002b56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1d9      	bne.n	8002b16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3314      	adds	r3, #20
 8002b68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b6c:	e853 3f00 	ldrex	r3, [r3]
 8002b70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3314      	adds	r3, #20
 8002b82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b92:	e841 2300 	strex	r3, r2, [r1]
 8002b96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1e1      	bne.n	8002b62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	3314      	adds	r3, #20
 8002ba4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ba8:	e853 3f00 	ldrex	r3, [r3]
 8002bac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	3314      	adds	r3, #20
 8002bbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002bc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002bc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bca:	e841 2300 	strex	r3, r2, [r1]
 8002bce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1e3      	bne.n	8002b9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	330c      	adds	r3, #12
 8002bea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bee:	e853 3f00 	ldrex	r3, [r3]
 8002bf2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf6:	f023 0310 	bic.w	r3, r3, #16
 8002bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	330c      	adds	r3, #12
 8002c04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c08:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c10:	e841 2300 	strex	r3, r2, [r1]
 8002c14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e3      	bne.n	8002be4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fe f9fc 	bl	800101e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	4619      	mov	r1, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f8b6 	bl	8002da8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c3c:	e099      	b.n	8002d72 <HAL_UART_IRQHandler+0x50e>
 8002c3e:	bf00      	nop
 8002c40:	08002fd7 	.word	0x08002fd7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 808b 	beq.w	8002d76 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002c60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8086 	beq.w	8002d76 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	330c      	adds	r3, #12
 8002c70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c74:	e853 3f00 	ldrex	r3, [r3]
 8002c78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c8e:	647a      	str	r2, [r7, #68]	; 0x44
 8002c90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c96:	e841 2300 	strex	r3, r2, [r1]
 8002c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1e3      	bne.n	8002c6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3314      	adds	r3, #20
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	623b      	str	r3, [r7, #32]
   return(result);
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3314      	adds	r3, #20
 8002cc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002cc6:	633a      	str	r2, [r7, #48]	; 0x30
 8002cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cce:	e841 2300 	strex	r3, r2, [r1]
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1e3      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	330c      	adds	r3, #12
 8002cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	e853 3f00 	ldrex	r3, [r3]
 8002cf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0310 	bic.w	r3, r3, #16
 8002cfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	330c      	adds	r3, #12
 8002d08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d0c:	61fa      	str	r2, [r7, #28]
 8002d0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d10:	69b9      	ldr	r1, [r7, #24]
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	e841 2300 	strex	r3, r2, [r1]
 8002d18:	617b      	str	r3, [r7, #20]
   return(result);
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e3      	bne.n	8002ce8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d24:	4619      	mov	r1, r3
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f83e 	bl	8002da8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d2c:	e023      	b.n	8002d76 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <HAL_UART_IRQHandler+0x4ea>
 8002d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f959 	bl	8002ffe <UART_Transmit_IT>
    return;
 8002d4c:	e014      	b.n	8002d78 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00e      	beq.n	8002d78 <HAL_UART_IRQHandler+0x514>
 8002d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f999 	bl	800309e <UART_EndTransmit_IT>
    return;
 8002d6c:	e004      	b.n	8002d78 <HAL_UART_IRQHandler+0x514>
    return;
 8002d6e:	bf00      	nop
 8002d70:	e002      	b.n	8002d78 <HAL_UART_IRQHandler+0x514>
      return;
 8002d72:	bf00      	nop
 8002d74:	e000      	b.n	8002d78 <HAL_UART_IRQHandler+0x514>
      return;
 8002d76:	bf00      	nop
  }
}
 8002d78:	37e8      	adds	r7, #232	; 0xe8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop

08002d80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b090      	sub	sp, #64	; 0x40
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd0:	e050      	b.n	8002e74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d04c      	beq.n	8002e74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d007      	beq.n	8002df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002de0:	f7fe f800 	bl	8000de4 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d241      	bcs.n	8002e74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	e853 3f00 	ldrex	r3, [r3]
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	330c      	adds	r3, #12
 8002e0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e10:	637a      	str	r2, [r7, #52]	; 0x34
 8002e12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e18:	e841 2300 	strex	r3, r2, [r1]
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e5      	bne.n	8002df0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3314      	adds	r3, #20
 8002e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	e853 3f00 	ldrex	r3, [r3]
 8002e32:	613b      	str	r3, [r7, #16]
   return(result);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f023 0301 	bic.w	r3, r3, #1
 8002e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3314      	adds	r3, #20
 8002e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e44:	623a      	str	r2, [r7, #32]
 8002e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e48:	69f9      	ldr	r1, [r7, #28]
 8002e4a:	6a3a      	ldr	r2, [r7, #32]
 8002e4c:	e841 2300 	strex	r3, r2, [r1]
 8002e50:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e5      	bne.n	8002e24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e00f      	b.n	8002e94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d09f      	beq.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3740      	adds	r7, #64	; 0x40
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	88fa      	ldrh	r2, [r7, #6]
 8002eb4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	88fa      	ldrh	r2, [r7, #6]
 8002eba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2222      	movs	r2, #34	; 0x22
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0220 	orr.w	r2, r2, #32
 8002f00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b095      	sub	sp, #84	; 0x54
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f22:	e853 3f00 	ldrex	r3, [r3]
 8002f26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	330c      	adds	r3, #12
 8002f36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f38:	643a      	str	r2, [r7, #64]	; 0x40
 8002f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f40:	e841 2300 	strex	r3, r2, [r1]
 8002f44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e5      	bne.n	8002f18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3314      	adds	r3, #20
 8002f52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	e853 3f00 	ldrex	r3, [r3]
 8002f5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f023 0301 	bic.w	r3, r3, #1
 8002f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3314      	adds	r3, #20
 8002f6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f74:	e841 2300 	strex	r3, r2, [r1]
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e5      	bne.n	8002f4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d119      	bne.n	8002fbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	330c      	adds	r3, #12
 8002f8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	e853 3f00 	ldrex	r3, [r3]
 8002f96:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f023 0310 	bic.w	r3, r3, #16
 8002f9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	330c      	adds	r3, #12
 8002fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fa8:	61ba      	str	r2, [r7, #24]
 8002faa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fac:	6979      	ldr	r1, [r7, #20]
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	e841 2300 	strex	r3, r2, [r1]
 8002fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e5      	bne.n	8002f88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002fca:	bf00      	nop
 8002fcc:	3754      	adds	r7, #84	; 0x54
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f7ff fecf 	bl	8002d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b21      	cmp	r3, #33	; 0x21
 8003010:	d13e      	bne.n	8003090 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301a:	d114      	bne.n	8003046 <UART_Transmit_IT+0x48>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d110      	bne.n	8003046 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003038:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	1c9a      	adds	r2, r3, #2
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	621a      	str	r2, [r3, #32]
 8003044:	e008      	b.n	8003058 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	1c59      	adds	r1, r3, #1
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6211      	str	r1, [r2, #32]
 8003050:	781a      	ldrb	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29b      	uxth	r3, r3
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	4619      	mov	r1, r3
 8003066:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10f      	bne.n	800308c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800307a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800308a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e000      	b.n	8003092 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
  }
}
 8003092:	4618      	mov	r0, r3
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff fe5e 	bl	8002d80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b08c      	sub	sp, #48	; 0x30
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b22      	cmp	r3, #34	; 0x22
 80030e0:	f040 80ab 	bne.w	800323a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ec:	d117      	bne.n	800311e <UART_Receive_IT+0x50>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d113      	bne.n	800311e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	b29b      	uxth	r3, r3
 8003108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310c:	b29a      	uxth	r2, r3
 800310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003110:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003116:	1c9a      	adds	r2, r3, #2
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	629a      	str	r2, [r3, #40]	; 0x28
 800311c:	e026      	b.n	800316c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003124:	2300      	movs	r3, #0
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003130:	d007      	beq.n	8003142 <UART_Receive_IT+0x74>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <UART_Receive_IT+0x82>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e008      	b.n	8003162 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800315c:	b2da      	uxtb	r2, r3
 800315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003160:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29b      	uxth	r3, r3
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	4619      	mov	r1, r3
 800317a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800317c:	2b00      	cmp	r3, #0
 800317e:	d15a      	bne.n	8003236 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0220 	bic.w	r2, r2, #32
 800318e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800319e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0201 	bic.w	r2, r2, #1
 80031ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d135      	bne.n	800322c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	330c      	adds	r3, #12
 80031cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	e853 3f00 	ldrex	r3, [r3]
 80031d4:	613b      	str	r3, [r7, #16]
   return(result);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f023 0310 	bic.w	r3, r3, #16
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	330c      	adds	r3, #12
 80031e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e6:	623a      	str	r2, [r7, #32]
 80031e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ea:	69f9      	ldr	r1, [r7, #28]
 80031ec:	6a3a      	ldr	r2, [r7, #32]
 80031ee:	e841 2300 	strex	r3, r2, [r1]
 80031f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1e5      	bne.n	80031c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	2b10      	cmp	r3, #16
 8003206:	d10a      	bne.n	800321e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003222:	4619      	mov	r1, r3
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff fdbf 	bl	8002da8 <HAL_UARTEx_RxEventCallback>
 800322a:	e002      	b.n	8003232 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7fd f94f 	bl	80004d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	e002      	b.n	800323c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	e000      	b.n	800323c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800323a:	2302      	movs	r3, #2
  }
}
 800323c:	4618      	mov	r0, r3
 800323e:	3730      	adds	r7, #48	; 0x30
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003248:	b09f      	sub	sp, #124	; 0x7c
 800324a:	af00      	add	r7, sp, #0
 800324c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800324e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325a:	68d9      	ldr	r1, [r3, #12]
 800325c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	ea40 0301 	orr.w	r3, r0, r1
 8003264:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	431a      	orrs	r2, r3
 8003270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	431a      	orrs	r2, r3
 8003276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	4313      	orrs	r3, r2
 800327c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800327e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003288:	f021 010c 	bic.w	r1, r1, #12
 800328c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003292:	430b      	orrs	r3, r1
 8003294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a2:	6999      	ldr	r1, [r3, #24]
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	ea40 0301 	orr.w	r3, r0, r1
 80032ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4bc5      	ldr	r3, [pc, #788]	; (80035c8 <UART_SetConfig+0x384>)
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d004      	beq.n	80032c2 <UART_SetConfig+0x7e>
 80032b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4bc3      	ldr	r3, [pc, #780]	; (80035cc <UART_SetConfig+0x388>)
 80032be:	429a      	cmp	r2, r3
 80032c0:	d103      	bne.n	80032ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032c2:	f7ff f8dd 	bl	8002480 <HAL_RCC_GetPCLK2Freq>
 80032c6:	6778      	str	r0, [r7, #116]	; 0x74
 80032c8:	e002      	b.n	80032d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032ca:	f7ff f8c5 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 80032ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d8:	f040 80b6 	bne.w	8003448 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032de:	461c      	mov	r4, r3
 80032e0:	f04f 0500 	mov.w	r5, #0
 80032e4:	4622      	mov	r2, r4
 80032e6:	462b      	mov	r3, r5
 80032e8:	1891      	adds	r1, r2, r2
 80032ea:	6439      	str	r1, [r7, #64]	; 0x40
 80032ec:	415b      	adcs	r3, r3
 80032ee:	647b      	str	r3, [r7, #68]	; 0x44
 80032f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032f4:	1912      	adds	r2, r2, r4
 80032f6:	eb45 0303 	adc.w	r3, r5, r3
 80032fa:	f04f 0000 	mov.w	r0, #0
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	00d9      	lsls	r1, r3, #3
 8003304:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003308:	00d0      	lsls	r0, r2, #3
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	1911      	adds	r1, r2, r4
 8003310:	6639      	str	r1, [r7, #96]	; 0x60
 8003312:	416b      	adcs	r3, r5
 8003314:	667b      	str	r3, [r7, #100]	; 0x64
 8003316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	461a      	mov	r2, r3
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	1891      	adds	r1, r2, r2
 8003322:	63b9      	str	r1, [r7, #56]	; 0x38
 8003324:	415b      	adcs	r3, r3
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800332c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003330:	f7fc ff52 	bl	80001d8 <__aeabi_uldivmod>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4ba5      	ldr	r3, [pc, #660]	; (80035d0 <UART_SetConfig+0x38c>)
 800333a:	fba3 2302 	umull	r2, r3, r3, r2
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	011e      	lsls	r6, r3, #4
 8003342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003344:	461c      	mov	r4, r3
 8003346:	f04f 0500 	mov.w	r5, #0
 800334a:	4622      	mov	r2, r4
 800334c:	462b      	mov	r3, r5
 800334e:	1891      	adds	r1, r2, r2
 8003350:	6339      	str	r1, [r7, #48]	; 0x30
 8003352:	415b      	adcs	r3, r3
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
 8003356:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800335a:	1912      	adds	r2, r2, r4
 800335c:	eb45 0303 	adc.w	r3, r5, r3
 8003360:	f04f 0000 	mov.w	r0, #0
 8003364:	f04f 0100 	mov.w	r1, #0
 8003368:	00d9      	lsls	r1, r3, #3
 800336a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800336e:	00d0      	lsls	r0, r2, #3
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	1911      	adds	r1, r2, r4
 8003376:	65b9      	str	r1, [r7, #88]	; 0x58
 8003378:	416b      	adcs	r3, r5
 800337a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800337c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	461a      	mov	r2, r3
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	1891      	adds	r1, r2, r2
 8003388:	62b9      	str	r1, [r7, #40]	; 0x28
 800338a:	415b      	adcs	r3, r3
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800338e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003392:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003396:	f7fc ff1f 	bl	80001d8 <__aeabi_uldivmod>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4b8c      	ldr	r3, [pc, #560]	; (80035d0 <UART_SetConfig+0x38c>)
 80033a0:	fba3 1302 	umull	r1, r3, r3, r2
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	2164      	movs	r1, #100	; 0x64
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	3332      	adds	r3, #50	; 0x32
 80033b2:	4a87      	ldr	r2, [pc, #540]	; (80035d0 <UART_SetConfig+0x38c>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033c0:	441e      	add	r6, r3
 80033c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c4:	4618      	mov	r0, r3
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	1894      	adds	r4, r2, r2
 80033d0:	623c      	str	r4, [r7, #32]
 80033d2:	415b      	adcs	r3, r3
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
 80033d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033da:	1812      	adds	r2, r2, r0
 80033dc:	eb41 0303 	adc.w	r3, r1, r3
 80033e0:	f04f 0400 	mov.w	r4, #0
 80033e4:	f04f 0500 	mov.w	r5, #0
 80033e8:	00dd      	lsls	r5, r3, #3
 80033ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80033ee:	00d4      	lsls	r4, r2, #3
 80033f0:	4622      	mov	r2, r4
 80033f2:	462b      	mov	r3, r5
 80033f4:	1814      	adds	r4, r2, r0
 80033f6:	653c      	str	r4, [r7, #80]	; 0x50
 80033f8:	414b      	adcs	r3, r1
 80033fa:	657b      	str	r3, [r7, #84]	; 0x54
 80033fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	461a      	mov	r2, r3
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	1891      	adds	r1, r2, r2
 8003408:	61b9      	str	r1, [r7, #24]
 800340a:	415b      	adcs	r3, r3
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003412:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003416:	f7fc fedf 	bl	80001d8 <__aeabi_uldivmod>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4b6c      	ldr	r3, [pc, #432]	; (80035d0 <UART_SetConfig+0x38c>)
 8003420:	fba3 1302 	umull	r1, r3, r3, r2
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	2164      	movs	r1, #100	; 0x64
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	3332      	adds	r3, #50	; 0x32
 8003432:	4a67      	ldr	r2, [pc, #412]	; (80035d0 <UART_SetConfig+0x38c>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	f003 0207 	and.w	r2, r3, #7
 800343e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4432      	add	r2, r6
 8003444:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003446:	e0b9      	b.n	80035bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800344a:	461c      	mov	r4, r3
 800344c:	f04f 0500 	mov.w	r5, #0
 8003450:	4622      	mov	r2, r4
 8003452:	462b      	mov	r3, r5
 8003454:	1891      	adds	r1, r2, r2
 8003456:	6139      	str	r1, [r7, #16]
 8003458:	415b      	adcs	r3, r3
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003460:	1912      	adds	r2, r2, r4
 8003462:	eb45 0303 	adc.w	r3, r5, r3
 8003466:	f04f 0000 	mov.w	r0, #0
 800346a:	f04f 0100 	mov.w	r1, #0
 800346e:	00d9      	lsls	r1, r3, #3
 8003470:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003474:	00d0      	lsls	r0, r2, #3
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	eb12 0804 	adds.w	r8, r2, r4
 800347e:	eb43 0905 	adc.w	r9, r3, r5
 8003482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4618      	mov	r0, r3
 8003488:	f04f 0100 	mov.w	r1, #0
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	008b      	lsls	r3, r1, #2
 8003496:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800349a:	0082      	lsls	r2, r0, #2
 800349c:	4640      	mov	r0, r8
 800349e:	4649      	mov	r1, r9
 80034a0:	f7fc fe9a 	bl	80001d8 <__aeabi_uldivmod>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4b49      	ldr	r3, [pc, #292]	; (80035d0 <UART_SetConfig+0x38c>)
 80034aa:	fba3 2302 	umull	r2, r3, r3, r2
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	011e      	lsls	r6, r3, #4
 80034b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b4:	4618      	mov	r0, r3
 80034b6:	f04f 0100 	mov.w	r1, #0
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	1894      	adds	r4, r2, r2
 80034c0:	60bc      	str	r4, [r7, #8]
 80034c2:	415b      	adcs	r3, r3
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034ca:	1812      	adds	r2, r2, r0
 80034cc:	eb41 0303 	adc.w	r3, r1, r3
 80034d0:	f04f 0400 	mov.w	r4, #0
 80034d4:	f04f 0500 	mov.w	r5, #0
 80034d8:	00dd      	lsls	r5, r3, #3
 80034da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034de:	00d4      	lsls	r4, r2, #3
 80034e0:	4622      	mov	r2, r4
 80034e2:	462b      	mov	r3, r5
 80034e4:	1814      	adds	r4, r2, r0
 80034e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80034e8:	414b      	adcs	r3, r1
 80034ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f04f 0100 	mov.w	r1, #0
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	008b      	lsls	r3, r1, #2
 8003500:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003504:	0082      	lsls	r2, r0, #2
 8003506:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800350a:	f7fc fe65 	bl	80001d8 <__aeabi_uldivmod>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4b2f      	ldr	r3, [pc, #188]	; (80035d0 <UART_SetConfig+0x38c>)
 8003514:	fba3 1302 	umull	r1, r3, r3, r2
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	2164      	movs	r1, #100	; 0x64
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	3332      	adds	r3, #50	; 0x32
 8003526:	4a2a      	ldr	r2, [pc, #168]	; (80035d0 <UART_SetConfig+0x38c>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003532:	441e      	add	r6, r3
 8003534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003536:	4618      	mov	r0, r3
 8003538:	f04f 0100 	mov.w	r1, #0
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	1894      	adds	r4, r2, r2
 8003542:	603c      	str	r4, [r7, #0]
 8003544:	415b      	adcs	r3, r3
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800354c:	1812      	adds	r2, r2, r0
 800354e:	eb41 0303 	adc.w	r3, r1, r3
 8003552:	f04f 0400 	mov.w	r4, #0
 8003556:	f04f 0500 	mov.w	r5, #0
 800355a:	00dd      	lsls	r5, r3, #3
 800355c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003560:	00d4      	lsls	r4, r2, #3
 8003562:	4622      	mov	r2, r4
 8003564:	462b      	mov	r3, r5
 8003566:	eb12 0a00 	adds.w	sl, r2, r0
 800356a:	eb43 0b01 	adc.w	fp, r3, r1
 800356e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4618      	mov	r0, r3
 8003574:	f04f 0100 	mov.w	r1, #0
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	008b      	lsls	r3, r1, #2
 8003582:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003586:	0082      	lsls	r2, r0, #2
 8003588:	4650      	mov	r0, sl
 800358a:	4659      	mov	r1, fp
 800358c:	f7fc fe24 	bl	80001d8 <__aeabi_uldivmod>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <UART_SetConfig+0x38c>)
 8003596:	fba3 1302 	umull	r1, r3, r3, r2
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	2164      	movs	r1, #100	; 0x64
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	3332      	adds	r3, #50	; 0x32
 80035a8:	4a09      	ldr	r2, [pc, #36]	; (80035d0 <UART_SetConfig+0x38c>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	f003 020f 	and.w	r2, r3, #15
 80035b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4432      	add	r2, r6
 80035ba:	609a      	str	r2, [r3, #8]
}
 80035bc:	bf00      	nop
 80035be:	377c      	adds	r7, #124	; 0x7c
 80035c0:	46bd      	mov	sp, r7
 80035c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035c6:	bf00      	nop
 80035c8:	40011000 	.word	0x40011000
 80035cc:	40011400 	.word	0x40011400
 80035d0:	51eb851f 	.word	0x51eb851f

080035d4 <__libc_init_array>:
 80035d4:	b570      	push	{r4, r5, r6, lr}
 80035d6:	4d0d      	ldr	r5, [pc, #52]	; (800360c <__libc_init_array+0x38>)
 80035d8:	4c0d      	ldr	r4, [pc, #52]	; (8003610 <__libc_init_array+0x3c>)
 80035da:	1b64      	subs	r4, r4, r5
 80035dc:	10a4      	asrs	r4, r4, #2
 80035de:	2600      	movs	r6, #0
 80035e0:	42a6      	cmp	r6, r4
 80035e2:	d109      	bne.n	80035f8 <__libc_init_array+0x24>
 80035e4:	4d0b      	ldr	r5, [pc, #44]	; (8003614 <__libc_init_array+0x40>)
 80035e6:	4c0c      	ldr	r4, [pc, #48]	; (8003618 <__libc_init_array+0x44>)
 80035e8:	f000 f820 	bl	800362c <_init>
 80035ec:	1b64      	subs	r4, r4, r5
 80035ee:	10a4      	asrs	r4, r4, #2
 80035f0:	2600      	movs	r6, #0
 80035f2:	42a6      	cmp	r6, r4
 80035f4:	d105      	bne.n	8003602 <__libc_init_array+0x2e>
 80035f6:	bd70      	pop	{r4, r5, r6, pc}
 80035f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80035fc:	4798      	blx	r3
 80035fe:	3601      	adds	r6, #1
 8003600:	e7ee      	b.n	80035e0 <__libc_init_array+0xc>
 8003602:	f855 3b04 	ldr.w	r3, [r5], #4
 8003606:	4798      	blx	r3
 8003608:	3601      	adds	r6, #1
 800360a:	e7f2      	b.n	80035f2 <__libc_init_array+0x1e>
 800360c:	08003668 	.word	0x08003668
 8003610:	08003668 	.word	0x08003668
 8003614:	08003668 	.word	0x08003668
 8003618:	0800366c 	.word	0x0800366c

0800361c <memset>:
 800361c:	4402      	add	r2, r0
 800361e:	4603      	mov	r3, r0
 8003620:	4293      	cmp	r3, r2
 8003622:	d100      	bne.n	8003626 <memset+0xa>
 8003624:	4770      	bx	lr
 8003626:	f803 1b01 	strb.w	r1, [r3], #1
 800362a:	e7f9      	b.n	8003620 <memset+0x4>

0800362c <_init>:
 800362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362e:	bf00      	nop
 8003630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003632:	bc08      	pop	{r3}
 8003634:	469e      	mov	lr, r3
 8003636:	4770      	bx	lr

08003638 <_fini>:
 8003638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363a:	bf00      	nop
 800363c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363e:	bc08      	pop	{r3}
 8003640:	469e      	mov	lr, r3
 8003642:	4770      	bx	lr
